{"current":2,"pageSize":10,"totalPages":6,"result":[{"id":"encapsulation-in-react","slug":"post/encapsulation-in-react","path":"/post/encapsulation-in-react","title":"React 中的一些封装","comments":true,"published":true,"date":"2020-03-22T21:06:34.000Z","updated":"","tags":[{"id":"50ce2da63bea6a618e7578fa50690040","name":"React","postCount":2,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"50ce2da63bea6a618e7578fa50690040","name":"React","slug":"categories/React","path":"/categories/React","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":2,"postIds":[]}],"excerpt":"<p>结合资料以及一直以来的开发情况，总结记录一下 React 中的封装方式，具体是以下三种：</p>\n<ul>\n<li>HOC</li>\n<li>Render Props</li>\n<li>React Hooks</li>\n</ul>\n","more":"","hash":"f15591dc7b027ccb9301580f6b438c26","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""},{"id":"my-mac-apps","slug":"post/my-mac-apps","path":"/post/my-mac-apps","title":"我的 Mac 应用","comments":true,"published":true,"date":"2020-03-13T14:26:11.000Z","updated":"","tags":[],"categories":[{"id":"aefcbfca08c840aeb8bd72dc1c8ff7f9","name":"生活","slug":"categories/生活","path":"/categories/生活","parentId":"","postCount":3,"postIds":[]}],"excerpt":"<p>记一下自用的简易 Mac 应用清单：</p>\n","more":"","hash":"fb9a0f99d96bc02d564698407866c0d6","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""},{"id":"function-hoist-and-conditionally-created-functions","slug":"post/function-hoist-and-conditionally-created-functions","path":"/post/function-hoist-and-conditionally-created-functions","title":"函数提升 & 有条件地创建函数","comments":true,"published":true,"date":"2020-03-08T15:54:52.000Z","updated":"","tags":[{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","postCount":16,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","slug":"categories/JavaScript","path":"/categories/JavaScript","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":11,"postIds":[]}],"excerpt":"<p>本文始于这样一道 JavaScript 题目。</p>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-keyword\">var</span> a;\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n  a = <span class=\"hljs-number\">5</span>;\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">a</span>(<span class=\"hljs-params\"></span>) {}\n  a = <span class=\"hljs-number\">2</span>;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a);\n}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a);</code></pre>","more":"","hash":"fee2b91ee3e981eb03b60c6ae3b8e6e6","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""},{"id":"oop-in-javascript","slug":"post/oop-in-javascript","path":"/post/oop-in-javascript","title":"JavaScript 中的面向对象","comments":true,"published":true,"date":"2020-02-23T13:19:07.000Z","updated":"","tags":[{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","postCount":16,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","slug":"categories/JavaScript","path":"/categories/JavaScript","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":11,"postIds":[]}],"excerpt":"<p>在 JavaScript 中没有类的概念，因此它的对象与基于类的语言中的对象不同。</p>\n<blockquote>\n<p>ECMA-262 把对象定义为：无序属性的集合，其属性可以包含基本值、对象或函数。</p>\n</blockquote>\n<p>一直以来在编程中都是使用 <code>class</code>、<code>extends</code> 关键字，而这实际上是 ES6 中添加的语法糖。在熟练使用语法糖的同时，有必要了解其背后的原生实现。</p>\n","more":"","hash":"b402900ed7a5b3d3cf6e3bffbdbf98a0","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""},{"id":"the-prototype-of-javascript","slug":"post/the-prototype-of-javascript","path":"/post/the-prototype-of-javascript","title":"JavaScript 原型相关","comments":true,"published":true,"date":"2020-02-09T10:41:22.000Z","updated":"","tags":[{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","postCount":16,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","slug":"categories/JavaScript","path":"/categories/JavaScript","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":11,"postIds":[]}],"excerpt":"<p>一直以来没有系统地去学习过原型相关的知识概念，虽然平时直接使用不多，但时常会看到，有必要搞明白一点。</p>\n","more":"","hash":"05bc56a654dda0572e5bf1fedb0c01c1","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""},{"id":"usage-of-ts-transformer","slug":"post/usage-of-ts-transformer","path":"/post/usage-of-ts-transformer","title":"TS transformer 的使用","comments":true,"published":true,"date":"2020-01-26T13:07:08.000Z","updated":"","tags":[{"id":"558b544cf685f39d34e4903e39c38b67","name":"TypeScript","postCount":6,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"558b544cf685f39d34e4903e39c38b67","name":"TypeScript","slug":"categories/TypeScript","path":"/categories/TypeScript","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":4,"postIds":[]}],"excerpt":"<p><code>TS transformer</code> 简单来讲就像<a href=\"https://babeljs.io/docs/en/plugins/\">babel 插件</a>一样，只不过作用于 TypeScript 的编译过程。</p>\n<p>与 babel 插件不同的是，配置 transformer 的时候会有 <code>before</code>、<code>after</code>、<code>afterDeclarations</code> 这三种选项，如果不清楚他们之前的区别的话，使用的时候会充满困惑。</p>\n<p>本文只关注 transformer 的使用，对应的 demo 仓库：<a href=\"https://github.com/daief/usage-of-ts-transformer\">https://github.com/daief/usage-of-ts-transformer</a>。</p>\n","more":"","hash":"ebf4532a5cdcbd505c04ab8afbb336ae","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""},{"id":"build-a-site-generator-by-a-custom-webpack-loader","slug":"post/build-a-site-generator-by-a-custom-webpack-loader","path":"/post/build-a-site-generator-by-a-custom-webpack-loader","title":"自定义 webpack loader 来实现简单的站点生成器","comments":true,"published":true,"date":"2020-01-11T15:05:40.000Z","updated":"","tags":[{"id":"424516ca53b4ad4bef37ed04f8795a88","name":"webpack","postCount":2,"postIds":[]},{"id":"4a527f83a3a4ca7e1d70adb26a35b72e","name":"loader","postCount":1,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]}],"excerpt":"<p>本篇内容实际上在公司内部分享时有过讲解，通过编写一个自定义的 webpack loader，实现方便快速地构建一个文档类型的网站。现在重新实现了一下，并将这个部分的内容与 <code>jugg</code> 进行了结合，故自己再次整理一遍。</p>\n","more":"","hash":"4f8ad34f949cf02c3a6e22d2e2fb302d","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""},{"id":"year-end-summary-2019","slug":"post/year-end-summary-2019","path":"/post/year-end-summary-2019","title":"我的 2019","comments":true,"published":true,"date":"2019-12-29T15:17:00.000Z","updated":"","tags":[{"id":"aefcbfca08c840aeb8bd72dc1c8ff7f9","name":"生活","postCount":2,"postIds":[]}],"categories":[{"id":"aefcbfca08c840aeb8bd72dc1c8ff7f9","name":"生活","slug":"categories/生活","path":"/categories/生活","parentId":"","postCount":3,"postIds":[]}],"excerpt":"<p>距离 2019 结束只有不到三天，好好写完这份总结应该是今年最后一件事了。</p>\n","more":"","hash":"2220f02f2f6555d142c83d74fa93520f","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""},{"id":"compile-vue-file-to-js-file","slug":"post/compile-vue-file-to-js-file","path":"/post/compile-vue-file-to-js-file","title":"编译 Vue 单文件组件至 JS 文件","comments":true,"published":true,"date":"2019-11-28T17:34:26.000Z","updated":"","tags":[{"id":"2d8ec58babcec05d3fe8f712968de749","name":"Vue","postCount":5,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]}],"excerpt":"<p>在开发 Vue 的组件库时，该如何将 <code>vue</code> 文件转换为 <code>commonjs</code> 或是 <code>ES Module</code> 规范的 <code>js</code> 文件，最后提供给他方使用？</p>\n<p>在这样的场景下，展开标题内容的研究与实践。</p>\n","more":"","hash":"5966b21e5799b4c577a2838b44570616","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""},{"id":"some-web-debugging-skills","slug":"post/some-web-debugging-skills","path":"/post/some-web-debugging-skills","title":"也许有用的 Web 调试技能","comments":true,"published":true,"date":"2019-11-03T00:37:13.000Z","updated":"","tags":[{"id":"986c37480b1f1c2e443504b38b6361b4","name":"Chrome","postCount":1,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]}],"excerpt":"<p>记录那些年，我们都在用的调试方法。第一部分主要是一些 Chrome 开发者工具的使用记录；剩余部分是一些其他的调试手段，包括移动端调试、代理内容的介绍。了解 Chrome 开发者的同学，可以跳过第一部分。</p>\n<p><img alt=\"谷歌娘\" loading=\"lazy\" title=\"谷歌娘\" width=\"300px\" class=\"post-image \" src=\"/images/ebf8ca7dbb0fa30d4c6a59d74be9b956.chrome-chan.jpg\" onerror=\"this.onerror=null;this.src='/images/image-error.jpg';\"></p>\n","more":"","hash":"5f05c9ed34d94d93218397db987e5fde","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""}]}