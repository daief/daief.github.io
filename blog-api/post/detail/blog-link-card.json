{"id":"blog-link-card","slug":"post/blog-link-card","path":"/post/blog-link-card","title":"在博客中添加卡片式链接","comments":true,"published":true,"date":"2021-08-21T14:27:25.000Z","updated":"","tags":[{"id":"be8df1f28c0abc85a0ed0c6860e5d832","name":"Blog","postCount":3,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]}],"excerpt":"<p>最近升级了的企业微信，发现发送链接信息的时候，企信会自动拉取链接的标题、描述和图片信息，并组合成卡片的形式进行展示，给人的感觉就很棒，既传递了更多的信息，又显得美观，就想着在博客里也加上这个功能。</p>\n<p>效果是下面这样的，如果展示的还是链接，那可能是还没加载出来或者背后的服务挂了（白嫖不易）：<a data-layout=\"card\" href=\"https://github.com\">Github</a></p>\n<p>截图效果如下：</p>\n<p><img alt=\"卡片截图\" loading=\"lazy\" width=\"390px\" title=\"卡片截图\" class=\"post-image \" src=\"/images/c45ab84aae2e07bf5593e504cc2394ef.blog-link-card.png\" onerror=\"this.onerror=null;this.src='/images/image-error.jpg';\"></p>\n","more":"\n\n<h2 id=\"实现\">实现<a name=\"实现\" class=\"headerlink\" href=\"#实现\"></a></h2><p>实现思路其实很简单，请求目标 url 的文本内容（HTML），接着在前端解析 HTML 标签内容，提取出标题、描述和图片，最后将超链接转换成卡片的样式。</p>\n<p>期间主要考虑的问题有两点：</p>\n<ul>\n<li>如何解决前端发起请求时的跨域问题</li>\n<li>如何使用 markdown 语法来表达卡片链接，并且不要破坏 markdown 的语法（原本用 hexo 里面就会有一些特定方言，尽量避免，以后迁移也不会有什么问题）</li>\n</ul>\n<p>第一个问题没法以纯前端的方式去解决了，最直接同时最简单的方式就是搭建一个允许跨域的代理服务器，但上服务器是不可能上的，于是谷歌一搜，真有免费的跨域代理（又赚了一个亿），确认了下不会被墙，那么先用了再说：<a data-layout=\"card\" href=\"https://allorigins.win/\">allOrigins</a></p>\n<p>接着关于第二个问题，观察标准的 markdown 语法是支持书写 href、text 和 title，href 是功能性的，text 是直接会展示的，只能在 title 上做手脚，我的想法就是将 title 的定义改了，支持直接写 url query 键值对的方式，这样一来就能输入更多的配置项：</p>\n<pre class=\"hljs language-md\" hljs-language=\"md\"><code style=\"display:block;\">[<span class=\"hljs-string\">Github</span>](<span class=\"hljs-link\">https://github.com &#x27;class=red&amp;target=_blank&amp;data-layout=card&#x27;</span>)</code></pre><p>可以约定配置了 <code>data-layout=card</code> 的超链接就将其转换成卡片。</p>\n<p>解法都有了就可以实现了，就是请求 HTML 文本解析内容，而内容提取的逻辑可以做得细节一点，比如可以定义三种信息的解析优先级：</p>\n<ul>\n<li>title：页面 title =&gt; meta 中的 og:title 字段 =&gt; markdown 中的 text</li>\n<li>description：meta 中的 description 字段 =&gt; meta 中的 og:description 字段 =&gt; 原始 href</li>\n<li>image：meta 中的 image 字段 =&gt; meta 中的 og:image 字段 =&gt; 页面中第一个 img 标签的 src =&gt; 网站 icon =&gt; 默认图片</li>\n</ul>\n<p>最后可以再考虑展示时的优化，比如因为是前端逻辑，每次都会触发页面的请求，可以像图片一样做个懒加载，当超链接滚动到视口内再执行转换逻辑。</p>\n<h2 id=\"结语\">结语<a name=\"结语\" class=\"headerlink\" href=\"#结语\"></a></h2><p>内容比较简单，但提升的体验还是不少的，开始愉快地使用起来吧。</p>\n<p>在这里要感谢各大厂商和大佬提供的免费服务，感谢他们让我以白嫖的姿态享受到了各种服务。</p>\n","hash":"957d422fedf0b641b5ee56d1ac9e676b","isArticle":true,"sort":0,"filename":"","raw":"","prev":{"id":"git-subtree","slug":"post/git-subtree","path":"/post/git-subtree","title":"Git Subtree 的使用","comments":true,"published":true,"date":"2021-08-15T21:07:02.000Z","updated":"","tags":[{"id":"0bcc70105ad279503e31fe7b3f47b665","name":"Git","postCount":2,"postIds":[]}],"categories":[{"id":"0bcc70105ad279503e31fe7b3f47b665","name":"Git","slug":"categories/Git","path":"/categories/Git","parentId":"","postCount":2,"postIds":[]}],"excerpt":"<p>git 的 <code>subtree</code> 是一种复用源代码的方式，可以让多个仓库引用某个仓库的代码，也可以将仓库中的某个目录拆分成一个子仓库以供其他仓库使用。</p>\n<p>相较于 git 的 <code>submodule</code>，目前社区中多更推崇 subtree，自己在使用了一段时间后总体也是认为 subtree 会更好用一些。</p>\n<p>但同时，两者都有各自的一些问题，而 subtree 的问题目前有其他方式规避，整体用起来比较流畅，所以最终选择了 subtree。</p>\n<blockquote>\n<p>实际上 subtree 命令需要在某个版本的 git 之后才被支持，但目前 git 的常用版本是完全足够的，所以也没去深究过。</p>\n</blockquote>\n","more":"","hash":"3a609768a9270469788f7c56233a2ed6","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""},"next":{"id":"react-state-management-based-on-react-hooks","slug":"post/react-state-management-based-on-react-hooks","path":"/post/react-state-management-based-on-react-hooks","title":"基于 React Hooks 的小型状态管理","comments":true,"published":true,"date":"2021-12-26T18:20:42.000Z","updated":"","tags":[{"id":"50ce2da63bea6a618e7578fa50690040","name":"React","postCount":2,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"50ce2da63bea6a618e7578fa50690040","name":"React","slug":"categories/React","path":"/categories/React","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":2,"postIds":[]}],"excerpt":"<p>一年又又又要过去了，在这 2021 年的尾巴，来写写 React 的状态管理。</p>\n<p>本文主要介绍一种基于 React Hooks 的状态共享方案，介绍其实现，并总结一下使用感受，目的是在状态管理方面提供多一种选择方式。</p>\n","more":"","hash":"7339a57fb5fac85352fa2dd99cdf25b9","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""}}