{"id":"happy-vue-with-typescript","slug":"post/happy-vue-with-typescript","path":"/post/happy-vue-with-typescript","title":"用 TypeScript 来写 Vue！","comments":true,"published":true,"date":"2019-02-12T17:25:59.000Z","updated":"","tags":[{"id":"2d8ec58babcec05d3fe8f712968de749","name":"Vue","postCount":5,"postIds":[]},{"id":"558b544cf685f39d34e4903e39c38b67","name":"TypeScript","postCount":6,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"558b544cf685f39d34e4903e39c38b67","name":"TypeScript","slug":"categories/TypeScript","path":"/categories/TypeScript","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":4,"postIds":[]}],"excerpt":"<p>本文不说明 webpack 的配置，简单介绍如何使用 TypeScript 来书写 Vue，阅读本文应同时对 TypeScript 和 Vue 有一定的了解。</p>\n","more":"\n\n<p>如果你在为如何搭建一个支持 Vue in TS 的环境而苦恼，在这里我推荐使用官方脚手架 <a href=\"https://cli.vuejs.org/\">Vue CLI 3</a>来生成一个项目；或是来试试我自己编写的脚手架，你可以直接拷贝<a href=\"https://github.com/daief/jugg/tree/master/examples/ts-vue\">这个例子</a>。这两种方式都不需要你介入配置，可以直接开始代码的编写，日后再研究环境的配置。</p>\n<p>编写本文时所使用的 Vue 版本为 2.x，TypeScript 版本为 3.x。</p>\n<p><strong>以下介绍的用 TS 编写 Vue 组件的方式与原来的方式不兼容，请不要对原来的项目直接进行改造。</strong></p>\n<h2 id=\"差异一览\">差异一览<a name=\"差异一览\" class=\"headerlink\" href=\"#差异一览\"></a></h2><p>使用 JS 编写如下简单组件：</p>\n<pre class=\"hljs language-html\" hljs-language=\"html\"><code style=\"display:block;\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">:src</span>=<span class=\"hljs-string\">&quot;src&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;photo&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;description&quot;</span>&gt;</span>{{description}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">src</span>: <span class=\"hljs-string\">&#x27;https://img2.vipcn.com/img2016/6/21/2016062150586477.jpg&#x27;</span>,\n      <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">&#x27;Saber-阿尔托莉雅·潘德拉贡&#x27;</span>\n    }\n  }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><p>使用 TS 之后：</p>\n<pre class=\"hljs language-html\" hljs-language=\"html\"><code style=\"display:block;\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">:src</span>=<span class=\"hljs-string\">&quot;src&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;photo&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;description&quot;</span>&gt;</span>{{description}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\">\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span>, <span class=\"hljs-title class_\">Vue</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-property-decorator&#x27;</span>;\n\n@<span class=\"hljs-title class_\">Component</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Post</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Vue</span> {\n  <span class=\"hljs-attr\">src</span>: string = <span class=\"hljs-string\">&#x27;https://img2.vipcn.com/img2016/6/21/2016062150586477.jpg&#x27;</span>\n  <span class=\"hljs-attr\">description</span>: string = <span class=\"hljs-string\">&#x27;Saber-阿尔托莉雅·潘德拉贡&#x27;</span>\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><p>可以看出写法上的改变比较大，首先一定得把 <code>script</code> 标签的 <code>lang</code> 设置为 <code>ts</code> 或 <code>tsx</code>；接着借助 <code>vue-property-decorator</code>，以<strong>类声明</strong>的方式编写 Vue 组件。</p>\n<p>下面简单介绍 <code>vue-property-decorator</code> 的使用，详细 API 可参看<a href=\"https://github.com/kaorun343/vue-property-decorator#readme\">官方文档</a>，同时也要参照<a href=\"https://github.com/vuejs/vue-class-component\">vue-class-component</a>。因为：</p>\n<blockquote>\n<p>vue-property-decorator:\nThis library fully depends on vue-class-component, so please read its <a href=\"https://github.com/vuejs/vue-class-component\">README</a> before using this library.</p>\n</blockquote>\n<h2 id=\"使用 vue-property-decorator\">使用 vue-property-decorator<a name=\"使用 vue-property-decorator\" class=\"headerlink\" href=\"#使用 vue-property-decorator\"></a></h2><p>以下介绍包括，详情还请参照其中注释：</p>\n<ul>\n<li>data</li>\n<li>prop</li>\n<li>computed</li>\n<li>methods</li>\n<li>watch</li>\n</ul>\n<pre class=\"hljs language-html\" hljs-language=\"html\"><code style=\"display:block;\"><span class=\"hljs-comment\">&lt;!-- Post.vue --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;handleClick&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">:src</span>=<span class=\"hljs-string\">&quot;src&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;photo&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;description&quot;</span>&gt;</span>{{description}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>counter: {{Count}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\">\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span>, <span class=\"hljs-title class_\">Vue</span>, <span class=\"hljs-title class_\">Prop</span>, <span class=\"hljs-title class_\">Watch</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-property-decorator&#x27;</span>;\n\n@<span class=\"hljs-title class_\">Component</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Post</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Vue</span> {\n  <span class=\"hljs-comment\">// data 属性</span>\n  <span class=\"hljs-attr\">src</span>: string = <span class=\"hljs-string\">&#x27;https://ae01.alicdn.com/kf/HTB1hZDNdEuF3KVjSZK9762VtXXaK.png&#x27;</span>\n  <span class=\"hljs-attr\">count</span>: number =  <span class=\"hljs-number\">1</span>\n\n  <span class=\"hljs-comment\">// computed 实现</span>\n  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">Count</span>() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`点击了<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.count}</span>次`</span>;\n  }\n\n  <span class=\"hljs-comment\">// 指定 description 为 prop</span>\n  @<span class=\"hljs-title class_\">Prop</span>({\n    <span class=\"hljs-attr\">default</span>: <span class=\"hljs-string\">&#x27;default description&#x27;</span>,\n    <span class=\"hljs-comment\">/**\n     * `required`、`type` 为 vue 运行时的检查\n     */</span>\n    <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">String</span>\n  })\n  description!: string\n\n  <span class=\"hljs-title function_\">handleClick</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// 点击事件，改变 data，更新界面</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">count</span> += <span class=\"hljs-number\">1</span>;\n  }\n\n  <span class=\"hljs-comment\">// mounted 生命周期钩子</span>\n  <span class=\"hljs-title function_\">mounted</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;mounted&#x27;</span>)\n  }\n\n  <span class=\"hljs-comment\">// watch</span>\n  @<span class=\"hljs-title class_\">Watch</span>(<span class=\"hljs-string\">&#x27;count&#x27;</span>)\n  <span class=\"hljs-title function_\">onCountChange</span>(<span class=\"hljs-params\">val: number, old: number</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`new value: <span class=\"hljs-subst\">${val}</span>, old value: <span class=\"hljs-subst\">${old}</span>`</span>)\n  }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><p>在其他组件中使用 <code>Post</code> 组件：</p>\n<pre class=\"hljs language-html\" hljs-language=\"html\"><code style=\"display:block;\"><span class=\"hljs-comment\">&lt;!-- App.vue --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>app<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">post</span> <span class=\"hljs-attr\">description</span>=<span class=\"hljs-string\">&quot;Saber-阿尔托莉雅·潘德拉贡&quot;</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\">\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span>, <span class=\"hljs-title class_\">Vue</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-property-decorator&#x27;</span>;\n<span class=\"hljs-comment\">// 导入组件</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Post</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/components/Post.vue&#x27;</span>;\n\n@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-comment\">// 组件注册</span>\n  <span class=\"hljs-attr\">components</span>: {\n    <span class=\"hljs-title class_\">Post</span>\n  }\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Vue</span> {\n\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre><p>本节需要注意一点，不要将点击事件、生命周期等方法写成箭头函数的形式，否则数据更新时界面不响应更新：</p>\n<pre class=\"hljs language-html\" hljs-language=\"html\"><code style=\"display:block;\"><span class=\"hljs-comment\">&lt;!-- ... 其他内容 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\">\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span>, <span class=\"hljs-title class_\">Vue</span>, <span class=\"hljs-title class_\">Prop</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-property-decorator&#x27;</span>;\n\n@<span class=\"hljs-title class_\">Component</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Post</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Vue</span> {\n  handleClick = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-comment\">// 结果界面不响应更新</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">count</span> += <span class=\"hljs-number\">1</span>;\n  }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><h2 id=\"加入 vuex\">加入 vuex<a name=\"加入 vuex\" class=\"headerlink\" href=\"#加入 vuex\"></a></h2><h3 id=\"定义 store\">定义 store<a name=\"定义 store\" class=\"headerlink\" href=\"#定义 store\"></a></h3><p>下面定义一个 store，由 <code>store.ts</code>、<code>./stores/homeStore.ts</code> 两个文件构成，包含一个名为 <code>homeStore</code> 的 module，来看看具体实现。</p>\n<pre class=\"hljs language-ts\" hljs-language=\"ts\"><code style=\"display:block;\"><span class=\"hljs-comment\">/* store.ts */</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Vue</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Vuex</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vuex&#x27;</span>;\n<span class=\"hljs-comment\">// 从 homeStore 中导出类型和对象</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">IHomeState</span>, homeStore } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./stores/homeStore&#x27;</span>;\n\n<span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-title class_\">Vuex</span>);\n\n<span class=\"hljs-comment\">// 定义 RootState</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">RootState</span> {\n  <span class=\"hljs-attr\">homeStore</span>: <span class=\"hljs-title class_\">IHomeState</span>;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vuex</span>.<span class=\"hljs-property\">Store</span>&lt;<span class=\"hljs-title class_\">RootState</span>&gt;({\n  <span class=\"hljs-attr\">modules</span>: {\n    homeStore,\n  },\n});</code></pre><pre class=\"hljs language-ts\" hljs-language=\"ts\"><code style=\"display:block;\"><span class=\"hljs-comment\">/* ./stores/homeStore.ts */</span>\n\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">MutationTree</span>, <span class=\"hljs-title class_\">ActionTree</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vuex&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">RootState</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../store&#x27;</span>;\n\n<span class=\"hljs-comment\">// 定义类型，描述 homeStore</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">IHomeState</span> {\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">state</span>: <span class=\"hljs-title class_\">IHomeState</span> = {\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;home title&#x27;</span>,\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-variable constant_\">TYPES</span> {\n  <span class=\"hljs-variable constant_\">SET_TITLE</span> = <span class=\"hljs-string\">&#x27;SET_TITLE&#x27;</span>,\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">mutations</span>: <span class=\"hljs-title class_\">MutationTree</span>&lt;<span class=\"hljs-title class_\">IHomeState</span>&gt; = {\n  [<span class=\"hljs-variable constant_\">TYPES</span>.<span class=\"hljs-property\">SET_TITLE</span>](s, <span class=\"hljs-attr\">newTitle</span>: <span class=\"hljs-built_in\">string</span>) {\n    s.<span class=\"hljs-property\">title</span> = newTitle;\n  },\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">actions</span>: <span class=\"hljs-title class_\">ActionTree</span>&lt;<span class=\"hljs-title class_\">IHomeState</span>, <span class=\"hljs-title class_\">RootState</span>&gt; = {\n  <span class=\"hljs-title function_\">setTitle</span>(<span class=\"hljs-params\">{ commit }, ele</span>) {\n    <span class=\"hljs-title function_\">commit</span>(<span class=\"hljs-variable constant_\">TYPES</span>.<span class=\"hljs-property\">SET_TITLE</span>, ele);\n  },\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> homeStore = {\n  <span class=\"hljs-attr\">namespaced</span>: <span class=\"hljs-literal\">true</span>,\n  state,\n  mutations,\n  actions,\n};</code></pre><p>代码实现上可以说是没有变化，就是加了不少类型用于描述、规范。下一步来看看具体怎么在组件中使用。</p>\n<h3 id=\"使用 store\">使用 store<a name=\"使用 store\" class=\"headerlink\" href=\"#使用 store\"></a></h3><p>在此之前介绍一下 <a href=\"https://github.com/ktsn/vuex-class#readme\">vuex-class</a>，是专为 vuex 和 vue-class-component 制定的绑定工具，用于优化使用。</p>\n<pre class=\"hljs language-html\" hljs-language=\"html\"><code style=\"display:block;\"><span class=\"hljs-comment\">&lt;!-- Home.vue --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;home&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>this is home page<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;changeTitle&quot;</span>&gt;</span>\n      title from store: {{homeStore.title}}\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>\n      click to change\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\">\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span>, <span class=\"hljs-title class_\">Vue</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue-property-decorator&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">State</span>, <span class=\"hljs-title class_\">Action</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vuex-class&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">IHomeState</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@/stores/homeStore&#x27;</span>;\n\n@<span class=\"hljs-title class_\">Component</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Home</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Vue</span> {\n  <span class=\"hljs-comment\">/**\n   * State 修饰后的属性时对应的 store 对象\n   * 此处为 homeStore\n   *\n   * this.homeStore.title 与 this.$store.homeStore.title 相同\n   */</span>\n  @<span class=\"hljs-title class_\">State</span> homeStore!: <span class=\"hljs-title class_\">IHomeState</span>;\n\n  <span class=\"hljs-comment\">/**\n   * Action 修饰后的属性是一个 function，即 store 中定义的 action\n   * 以下的使用等价：\n   *\n   * this.changeTitleAc(&#x27;new title&#x27;)\n   *\n   * this.$store.dispatch(&#x27;new title&#x27;)\n   */</span>\n  @<span class=\"hljs-title class_\">Action</span>(<span class=\"hljs-string\">&#x27;homeStore/setTitle&#x27;</span>) changeTitleAc!: <span class=\"hljs-title class_\">Function</span>;\n\n  count = <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-title function_\">changeTitle</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">changeTitleAc</span>(<span class=\"hljs-string\">`get a new title - <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.count}</span>`</span>);\n  }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><h2 id=\"遇到的问题\">遇到的问题<a name=\"遇到的问题\" class=\"headerlink\" href=\"#遇到的问题\"></a></h2><h3 id=\"Property &#39;XX&#39; does not exist on type &#39;YY&#39;\">Property &#39;XX&#39; does not exist on type &#39;YY&#39;<a name=\"Property &#39;XX&#39; does not exist on type &#39;YY&#39;\" class=\"headerlink\" href=\"#Property &#39;XX&#39; does not exist on type &#39;YY&#39;\"></a></h3><p>有的时候我们会把一些对象挂载在 Vue 原型上，这样能方便在组件中的使用，以 lodash 为例。</p>\n<p>入口文件 index.ts：</p>\n<pre class=\"hljs language-ts\" hljs-language=\"ts\"><code style=\"display:block;\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Vue</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./App.vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./router&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> store <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./store&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> _ <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;lodash&#x27;</span>;\n\n<span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-property\">config</span>.<span class=\"hljs-property\">productionTip</span> = <span class=\"hljs-literal\">false</span>;\n\n<span class=\"hljs-comment\">// 将 lodash 挂载到 Vue 原型</span>\n<span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">_</span> = _;\n\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>({\n  router,\n  store,\n  <span class=\"hljs-attr\">render</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">h</span> =&gt;</span> <span class=\"hljs-title function_\">h</span>(<span class=\"hljs-title class_\">App</span>),\n}).$mount(<span class=\"hljs-string\">&#x27;#root&#x27;</span>);\n</code></pre><p>在 Home.vue 组件中使用：</p>\n<pre class=\"hljs language-html\" hljs-language=\"html\"><code style=\"display:block;\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\">\n<span class=\"hljs-comment\">// ...</span>\n\n@<span class=\"hljs-title class_\">Component</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Home</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Vue</span> {\n  <span class=\"hljs-title function_\">mounted</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// 使用 lodash</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_</span>.<span class=\"hljs-title function_\">lowerCase</span>(<span class=\"hljs-string\">&#x27;AABB&#x27;</span>));\n  }\n\n  <span class=\"hljs-comment\">// ...</span>\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><p>这时候不出 TS 的编译会抛给你一个错误，而这实际上是个类型描述问题，对于 TS 编译器来说它并不知道 <code>_</code> 的存在以及描述，这时候当我使用这个类型未知的内容时就会被禁止。</p>\n<pre class=\"hljs language-bash\" hljs-language=\"bash\"><code style=\"display:block;\">Property <span class=\"hljs-string\">&#x27;_&#x27;</span> does not exist on <span class=\"hljs-built_in\">type</span> <span class=\"hljs-string\">&#x27;Home&#x27;</span>.</code></pre><p>所以新建一个类型文件来告诉 TS 什么是 <code>_</code>：</p>\n<pre class=\"hljs language-ts\" hljs-language=\"ts\"><code style=\"display:block;\"><span class=\"hljs-comment\">// src/@types/extend-vue.d.ts</span>\n<span class=\"hljs-comment\">// https://stackoverflow.com/questions/43142304/how-to-augment-the-vue-class-and-keep-typescript-definition-in-sync/43232151#43232151</span>\n<span class=\"hljs-comment\">// 1. Make sure to import &#x27;vue&#x27; before declaring augmented types</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Vue</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> _ <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;lodash&#x27;</span>;\n\n<span class=\"hljs-comment\">// 2. Specify a file with the types you want to augment</span>\n<span class=\"hljs-comment\">//    Vue has the constructor type in types/vue.d.ts</span>\n<span class=\"hljs-keyword\">declare</span> <span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">&#x27;vue/types/vue&#x27;</span> {\n  <span class=\"hljs-comment\">// 3. Declare augmentation for Vue</span>\n  <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Vue</span> {\n    <span class=\"hljs-attr\">_</span>: <span class=\"hljs-keyword\">typeof</span> _;\n  }\n}</code></pre><h2 id=\"结语\">结语<a name=\"结语\" class=\"headerlink\" href=\"#结语\"></a></h2><p>在学习过程中可以发现，TypeScript 和 Vue 2 的结合并不十分契合，可以看看尤大对此的说法——<a href=\"https://juejin.im/entry/5c5d59c7e51d45013e50b41b\">值得一看，Vue 作者尤雨溪的回答【TypeScript 不适合在 vue 业务开发中使用吗？】</a>。</p>\n<p>但是也不是说不能用，基于现状，这是我所知用 TS 编写 Vue 较好的方式了。或者，来期待 Vue 3 的发布。</p>\n<p>最后，介绍一下我用 TS 写的 <a href=\"https://github.com/daief/vue-music\">Vue 项目</a>，项目进度很慢并随时可能 TJ。</p>\n<hr>\n<p>参考链接 &amp; 相关阅读:</p>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000011744210\">vue + typescript 项目起手式</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000011878086\">vue + typescript 进阶篇</a></li>\n<li><a href=\"https://sunskyxh.github.io/2018/03/12/dose-refactoring-vue-project-into-typescript-deserved/\">有必要将Vue项目重构到Typescript吗?</a></li>\n<li><a href=\"https://docs.google.com/presentation/d/1yhPGyhQrJcpJI2ZFvBme3pGKaGNiLi709c37svivv0o/edit#slide=id.g4689c30700_0_35\">Vue 3.0 Updates</a></li>\n<li><a href=\"https://github.com/qidaizhe11/element-pro\">Vue 版 Ant Design Pro</a></li>\n<li><a href=\"https://github.com/qidaizhe11/vue-vuex-typescript-demo\">vue-vuex-typescript-demo</a></li>\n<li><a href=\"https://github.com/kaorun343/vue-property-decorator#readme\">vue-property-decorator</a></li>\n<li><a href=\"https://github.com/vuejs/vue-class-component\">vue-class-component</a></li>\n<li><a href=\"https://github.com/ktsn/vuex-class#readme\">vuex-class</a></li>\n</ul>\n","hash":"51210fa84cdec43a85618dcc63453245","isArticle":true,"sort":0,"filename":"","raw":"","prev":{"id":"the-first-time-i-learn-ast","slug":"post/the-first-time-i-learn-ast","path":"/post/the-first-time-i-learn-ast","title":"初识 AST","comments":true,"published":true,"date":"2019-02-01T15:58:47.000Z","updated":"","tags":[{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","postCount":16,"postIds":[]},{"id":"558b544cf685f39d34e4903e39c38b67","name":"TypeScript","postCount":6,"postIds":[]},{"id":"c77bb0f69e2a80e046a8dc7f0da9320f","name":"AST","postCount":1,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]}],"excerpt":"<blockquote>\n<p>在计算机科学中，抽象语法树（Abstract Syntax Tree，AST），或简称语法树（Syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。</p>\n</blockquote>\n<p>Babel、UglifyJS2、ESLint、Webpack、TypeScript 等我们熟知的工具都包含 AST 的应用，实现了强大的功能。本文主要记录学习、应用 AST 的过程，主要内容：1. 解读 <a href=\"https://github.com/gaearon/react-hot-loader/blob/master/src/babel.dev.js\">react-hot-loader dev 环境下的 Babel 插件</a>；2. 编写对应的 TypeScript transformer 尽可能实现相同的功能。</p>\n","more":"","hash":"02f7d4aab4ea924a95a4911037728cce","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""},"next":{"id":"getting-started-with-docker","slug":"post/getting-started-with-docker","path":"/post/getting-started-with-docker","title":"Docker 入门笔记","comments":true,"published":true,"date":"2019-07-01T19:52:55.000Z","updated":"","tags":[{"id":"c5fd214cdd0d2b3b4272e73b022ba5c2","name":"Docker","postCount":1,"postIds":[]}],"categories":[{"id":"407432c641358300c37673ae96305f3a","name":"DevOps","slug":"categories/DevOps","path":"/categories/DevOps","parentId":"","postCount":1,"postIds":[]},{"id":"c5fd214cdd0d2b3b4272e73b022ba5c2","name":"Docker","slug":"categories/Docker","path":"/categories/Docker","parentId":"407432c641358300c37673ae96305f3a","postCount":1,"postIds":[]}],"excerpt":"<p>本文是学习 Docker 时的初学者记录，内容是关于 Docker 基本命令的使用。如果您对此已经熟悉，大可略过本文。</p>\n","more":"","hash":"a5f38dde31551ed59427987a0920095f","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""}}