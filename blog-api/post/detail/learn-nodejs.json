{"id":"learn-nodejs","slug":"post/learn-nodejs","path":"/post/learn-nodejs","title":"Node.js 学习搭建","comments":true,"published":true,"date":"2017-10-04T00:00:00.000Z","updated":"","tags":[{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","postCount":16,"postIds":[]},{"id":"3b2819dd4c24eda2faf2052eef449551","name":"Node.js","postCount":3,"postIds":[]}],"categories":[{"id":"3b2819dd4c24eda2faf2052eef449551","name":"Node.js","slug":"categories/Node.js","path":"/categories/Node.js","parentId":"","postCount":2,"postIds":[]}],"excerpt":"<p>听说 Node.js 是开启 JavaScript 后端开发之旅的技术，学习一下服务器的搭建过程。</p>\n","more":"\n\n<h3 id=\"安装 Node 环境\">安装 Node 环境<a name=\"安装 Node 环境\" class=\"headerlink\" href=\"#安装 Node 环境\"></a></h3><p>前往<a href=\"http://nodejs.cn/download/\">Node.js 官网</a>进行下载安装。</p>\n<p>安装完成后，终端识别<code>node</code>命令：</p>\n<pre class=\"hljs language-bash\" hljs-language=\"bash\"><code style=\"display:block;\">C:\\Users\\Administrator&gt;node -v\nv8.1.2</code></pre><h4 id=\"npm\">npm<a name=\"npm\" class=\"headerlink\" href=\"#npm\"></a></h4><p>安装完 Node 之后会同时安装<code>npm</code>，<code>npm</code>是 Node.js 的包管理工具（package manager）。</p>\n<blockquote>\n<p>为啥我们需要一个包管理工具呢？因为我们在 Node.js 上开发时，会用到很多别人写的 JavaScript 代码。如果我们要使用别人写的某个包，每次都根据名称搜索一下官方网站，下载代码，解压，再使用，非常繁琐。于是一个集中管理的工具应运而生：大家都把自己开发的模块打包后放到 npm 官网上，如果要使用，直接通过 npm 安装就可以直接用，不用管代码存在哪，应该从哪下载。\n更重要的是，如果我们要使用模块 A，而模块 A 又依赖于模块 B，模块 B 又依赖于模块 X 和模块 Y，npm 可以根据依赖关系，把所有依赖的包都下载下来并管理起来。否则，靠我们自己手动管理，肯定既麻烦又容易出错。</p>\n</blockquote>\n<p>npm 常用命令：</p>\n<pre class=\"hljs language-bash\" hljs-language=\"bash\"><code style=\"display:block;\">npm -v  <span class=\"hljs-comment\"># 查看npm版本</span>\nnpm <span class=\"hljs-built_in\">help</span> <span class=\"hljs-comment\"># 查看帮助</span>\nnpm init <span class=\"hljs-comment\"># 引导创建package.json文件。</span>\nnpm install <span class=\"hljs-comment\"># 安装package.json文件已保存的包</span>\nnpm install &lt;包名称&gt; <span class=\"hljs-comment\"># 在本地安装包</span>\nnpm install &lt;包名称&gt; -g <span class=\"hljs-comment\"># 在全局安装包</span>\n<span class=\"hljs-comment\"># 安装的同时将信息写入package.json文件中的dependencies</span>\nnpm install &lt;包名称&gt; --save\n<span class=\"hljs-comment\"># 安装的同时将信息写入package.json文件的devDependencies</span>\nnpm install &lt;包名称&gt; --save-dev\nnpm uninstall &lt;包名称&gt; <span class=\"hljs-comment\"># 卸载本地包</span>\nnpm uninstall &lt;包名称&gt; -g <span class=\"hljs-comment\"># 卸载全局包</span>\n<span class=\"hljs-comment\"># 卸载的同时将信息从package.json文件中的dependencies移除</span>\nnpm uninstall &lt;包名称&gt; -save\n<span class=\"hljs-comment\"># 卸载的同时将信息从package.json文件中的devDependencies移除</span>\nnpm uninstall &lt;包名称&gt; -save-dev\nnpm list <span class=\"hljs-comment\"># 查看本地所有包</span>\nnpm list -g <span class=\"hljs-comment\"># 查看全局所有包</span>\nnpm root <span class=\"hljs-comment\"># 查看本地包安装路径</span>\nnpm root -g <span class=\"hljs-comment\"># 查看全局包安装路径</span>\nnpm outdated <span class=\"hljs-comment\"># 查看本地过期包</span>\nnpm outdated -g <span class=\"hljs-comment\"># 查看全局过期包</span>\nnpm update <span class=\"hljs-comment\"># 升级本地所有过期包</span>\nnpm update -g <span class=\"hljs-comment\"># 升级全局所有过期包</span>\nnpm update &lt;包名称&gt; <span class=\"hljs-comment\"># 升级本地包</span>\nnpm update &lt;包名称&gt; -g <span class=\"hljs-comment\"># 升级全局包</span></code></pre><h3 id=\"创建 Node 项目\">创建 Node 项目<a name=\"创建 Node 项目\" class=\"headerlink\" href=\"#创建 Node 项目\"></a></h3><p>新建空目录<code>node</code></p>\n<p>进入后在当前目录打开终端，使用<code>npm init</code>初始化：</p>\n<pre class=\"hljs language-bash\" hljs-language=\"bash\"><code style=\"display:block;\">npm init\n\n<span class=\"hljs-comment\"># 根据提示进行填写</span>\n\n<span class=\"hljs-comment\"># 然后生成一个 package.json</span>\n</code></pre><p>新建<code>app.js</code>：</p>\n<pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;hello world&quot;</span>);</code></pre><p>最后终端里运行可以看到：</p>\n<pre class=\"hljs language-bash\" hljs-language=\"bash\"><code style=\"display:block;\">C:\\Users\\Administrator\\Desktop\\node&gt;node app.js\nhello world</code></pre><h3 id=\"创建一个 Web 服务器\">创建一个 Web 服务器<a name=\"创建一个 Web 服务器\" class=\"headerlink\" href=\"#创建一个 Web 服务器\"></a></h3><p>Node.js 应用是由哪几部分组成的：</p>\n<ol>\n<li>引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块。</li>\n<li>创建服务器：服务器可以监听客户端的请求，类似于 Apache 、Nginx 等 HTTP 服务器。</li>\n<li>接收请求与响应请求 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。</li>\n</ol>\n<h4 id=\"使用<code>http</code>模块监听端口、创建服务\">使用<code>http</code>模块监听端口、创建服务<a name=\"使用<code>http</code>模块监听端口、创建服务\" class=\"headerlink\" href=\"#使用<code>http</code>模块监听端口、创建服务\"></a></h4><p>编辑<code>app.js</code>:</p>\n<pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-keyword\">var</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;http&quot;</span>);\n\nhttp\n  .<span class=\"hljs-title function_\">createServer</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">request, response</span>) {\n    <span class=\"hljs-comment\">// 发送 HTTP 头部</span>\n    <span class=\"hljs-comment\">// HTTP 状态值: 200 : OK</span>\n    <span class=\"hljs-comment\">// 内容类型: text/plain;charset=utf-8</span>\n    response.<span class=\"hljs-title function_\">writeHead</span>(<span class=\"hljs-number\">200</span>, { <span class=\"hljs-string\">&quot;Content-Type&quot;</span>: <span class=\"hljs-string\">&quot;text/plain;charset=utf-8&quot;</span> });\n\n    response.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">&quot;Hello World&quot;</span>);\n\n    response.<span class=\"hljs-title function_\">end</span>();\n  })\n  .<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">8888</span>);\n\n<span class=\"hljs-comment\">// 第一行请求（require）Node.js 自带的 http模块，并且把它赋值给 http 变量。</span>\n<span class=\"hljs-comment\">// 接下来我们调用 http 模块提供的函数： createServer 。这个函数会返回</span>\n<span class=\"hljs-comment\">// 一个对象，这个对象有一个叫做 listen 的方法</span>\n<span class=\"hljs-comment\">// listen 方法有一个数值参数，指定这个 HTTP 服务器监听的端口号。</span></code></pre><p><code>node app.js</code>运行后，浏览器访问<code>http://127.0.0.1:8888/</code>可以看到<code>hello world</code></p>\n<h4 id=\"引入<code>fs</code>模块读写文件\">引入<code>fs</code>模块读写文件<a name=\"引入<code>fs</code>模块读写文件\" class=\"headerlink\" href=\"#引入<code>fs</code>模块读写文件\"></a></h4><p>因为是单线程运行的，为了不因为读写操作造成阻塞，一般使用异步的方式。</p>\n<p>修改 app.js：</p>\n<pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-keyword\">var</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;http&quot;</span>);\n<span class=\"hljs-comment\">// 引入 fs 模块并赋值给变量 fs</span>\n<span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);\n\nhttp\n  .<span class=\"hljs-title function_\">createServer</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">request, response</span>) {\n    <span class=\"hljs-comment\">// 发送 HTTP 头部</span>\n    <span class=\"hljs-comment\">// HTTP 状态值: 200 : OK</span>\n    <span class=\"hljs-comment\">// 内容类型: text/plain;charset=utf-8</span>\n    response.<span class=\"hljs-title function_\">writeHead</span>(<span class=\"hljs-number\">200</span>, { <span class=\"hljs-string\">&quot;Content-Type&quot;</span>: <span class=\"hljs-string\">&quot;text/plain;charset=utf-8&quot;</span> });\n\n    <span class=\"hljs-comment\">// 读取文件，异步执行。同步：var data = fs.readFileSync(&#x27;input.txt&#x27;);</span>\n    fs.<span class=\"hljs-title function_\">readFile</span>(<span class=\"hljs-string\">&quot;file/1.txt&quot;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, data</span>) {\n      <span class=\"hljs-comment\">// 回调函数</span>\n      <span class=\"hljs-keyword\">if</span> (err) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err);\n        <span class=\"hljs-comment\">// 读取失败发回响应信息</span>\n        response.<span class=\"hljs-title function_\">end</span>(<span class=\"hljs-string\">&quot;文件读取失败&quot;</span>);\n        <span class=\"hljs-keyword\">return</span>;\n      }\n      <span class=\"hljs-comment\">// 发回文件内容</span>\n      response.<span class=\"hljs-title function_\">end</span>(data.<span class=\"hljs-title function_\">toString</span>());\n    });\n  })\n  .<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">8888</span>);\n\n<span class=\"hljs-comment\">// 第一行请求（require）Node.js 自带的 http模块，并且把它赋值给 http 变量。</span>\n<span class=\"hljs-comment\">// 接下来我们调用 http 模块提供的函数： createServer 。这个函数会返回</span>\n<span class=\"hljs-comment\">// 一个对象，这个对象有一个叫做 listen 的方法</span>\n<span class=\"hljs-comment\">// listen 方法有一个数值参数，指定这个 HTTP 服务器监听的端口号。</span></code></pre><p><code>node app.js</code>运行后，浏览器访问<code>http://127.0.0.1:8888/</code>可以看到<code>文件读取失败</code>，并能在终端看到错误信息。创建<code>file/1.txt</code>：</p>\n<pre class=\"hljs language-text\" hljs-language=\"text\"><code style=\"display:block;\">hello node.js\n\njavascript</code></pre><p>重新访问<code>http://127.0.0.1:8888/</code>可看到上述信息。</p>\n<h3 id=\"使用中间件<code>express</code>搭建服务\">使用中间件<code>express</code>搭建服务<a name=\"使用中间件<code>express</code>搭建服务\" class=\"headerlink\" href=\"#使用中间件<code>express</code>搭建服务\"></a></h3><p>编辑<code>app.js</code>：</p>\n<pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-comment\">// 引入中间件</span>\n<span class=\"hljs-keyword\">var</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;express&quot;</span>);\n\n<span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-title function_\">express</span>();\n\n<span class=\"hljs-comment\">// 注册路由&#x27;/&#x27;</span>\napp.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) {\n  res.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">&quot;Hello World&quot;</span>);\n});\n\n<span class=\"hljs-comment\">// 监听端口</span>\napp.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">8888</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;run@&quot;</span>, <span class=\"hljs-number\">8888</span>);\n});</code></pre><p>重新运行<code>node app.js</code>，终端会报错提示找不到<code>express</code>模块，这时候就需要用<code>npm</code>安装模块：</p>\n<pre class=\"hljs language-bash\" hljs-language=\"bash\"><code style=\"display:block;\">npm install express --save\n\n+ express@4.16.2\nadded 48 packages <span class=\"hljs-keyword\">in</span> 28.21s</code></pre><p>完成之后会发现多了一个<code>node_modules</code>，专门用于存放模块，打开<code>package.json</code>，会发现多了一条<code>dependencies</code>信息，随着模块的增多，<code>dependencies</code>的内容也会变多：</p>\n<pre class=\"hljs language-json\" hljs-language=\"json\"><code style=\"display:block;\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;node&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;1.0.0&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;description&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;main&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;index.js&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;scripts&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;test&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;author&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;license&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ISC&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;dependencies&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;express&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^4.16.2&quot;</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span></code></pre><p>这时候重新运行并访问<code>http://127.0.0.1:8888/</code>，可看到<code>Hello World</code>，试着访问<code>http://127.0.0.1:8888/index.html</code>则是<code>Cannot GET /index.html</code>。</p>\n<h3 id=\"设置静态资源目录\">设置静态资源目录<a name=\"设置静态资源目录\" class=\"headerlink\" href=\"#设置静态资源目录\"></a></h3><p>编辑<code>app.js</code>加入<code>app.use(express.static(&#39;public&#39;))</code>：</p>\n<pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-comment\">// 引入中间件</span>\n<span class=\"hljs-keyword\">var</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;express&quot;</span>);\n\n<span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-title function_\">express</span>();\n\n<span class=\"hljs-comment\">// 设置public目录作为静态资源，可以直接通过url进行访问</span>\napp.<span class=\"hljs-title function_\">use</span>(express.<span class=\"hljs-title function_\">static</span>(<span class=\"hljs-string\">&quot;public&quot;</span>));\n\napp.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) {\n  res.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">&quot;Hello GET&quot;</span>);\n});\n\napp.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">8888</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;run@&quot;</span>, <span class=\"hljs-number\">8888</span>);\n});</code></pre><p>创建<code>public</code>目录，在其中放入一些 html、图片或文件，通过<code>http://127.0.0.1:8888/index.html</code>、<code>http://127.0.0.1:8888/images/avatar.png</code>……访问。</p>\n<pre class=\"hljs language-bash\" hljs-language=\"bash\"><code style=\"display:block;\">public\n  │  index.html\n  │\n  └─images\n    avatar.png\n    yoki1.jpg\n    yoki2.png</code></pre><h3 id=\"使用 ejs 模板\">使用 ejs 模板<a name=\"使用 ejs 模板\" class=\"headerlink\" href=\"#使用 ejs 模板\"></a></h3><p>安装 ejs：</p>\n<pre class=\"hljs language-npm\" hljs-language=\"npm\"><code style=\"display:block;\">npm i ejs --save</code></pre><p>创建<code>views</code>目录，并在其中创建 hello.ejs：</p>\n<pre class=\"hljs language-ejs\" hljs-language=\"ejs\"><code style=\"display:block;\">&lt;div&gt;\n  姓名: &lt;%=name%&gt;\n&lt;/div&gt;</code></pre><p>引入、使用，编辑<code>app.js</code>：</p>\n<pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-comment\">// 引入中间件</span>\n<span class=\"hljs-keyword\">var</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;express&quot;</span>);\n<span class=\"hljs-comment\">// 引入ejs</span>\n<span class=\"hljs-keyword\">var</span> ejs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;ejs&quot;</span>);\n<span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-title function_\">express</span>();\n\n<span class=\"hljs-comment\">// 设置public目录作为静态资源，可以直接通过url进行访问</span>\napp.<span class=\"hljs-title function_\">use</span>(express.<span class=\"hljs-title function_\">static</span>(<span class=\"hljs-string\">&quot;public&quot;</span>));\n\n<span class=\"hljs-comment\">// 将模版引擎设置为 ejs</span>\napp.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">&quot;view engine&quot;</span>, <span class=\"hljs-string\">&quot;ejs&quot;</span>);\n\n<span class=\"hljs-comment\">// 将 app.set(&#x27;view engine&#x27;, &#x27;ejs&#x27;); 换成下面两句之后</span>\n<span class=\"hljs-comment\">// 模板不再以.ejs结尾，改为.html</span>\n<span class=\"hljs-comment\">// 如./views下的 index.ejs 改为 index.html</span>\n<span class=\"hljs-comment\">// app.engine(&#x27;.html&#x27;,ejs.__express);</span>\n<span class=\"hljs-comment\">// app.set(&#x27;view engine&#x27;, &#x27;html&#x27;);</span>\n\napp.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) {\n  res.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">&quot;Hello GET&quot;</span>);\n});\n\napp.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;/hello&quot;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) {\n  <span class=\"hljs-comment\">// 修改响应信息</span>\n  <span class=\"hljs-comment\">// 渲染 hello.ejs</span>\n  <span class=\"hljs-comment\">// 读取 ./views/hello.ejs文件的内容，然后将其中的name变量替换为test,例如&lt;%=name%&gt;会变为张三</span>\n  res.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-string\">&quot;hello&quot;</span>, { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;张三&quot;</span> });\n});\n\napp.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">8888</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;run@&quot;</span>, <span class=\"hljs-number\">8888</span>);\n});</code></pre><p>重新运行、访问<code>http://127.0.0.1:8888/hello</code>，可看到<code>姓名：张三</code>。</p>\n<h3 id=\"路由\">路由<a name=\"路由\" class=\"headerlink\" href=\"#路由\"></a></h3><p>创建<code>router</code>目录，创建<code>user.js</code>，当前目录结构：</p>\n<pre class=\"hljs language-bash\" hljs-language=\"bash\"><code style=\"display:block;\">├─file\n├─node_modules\n├─public\n│  └─images\n├─router\n└─views</code></pre><p>在<code>app.js</code>中添加：</p>\n<pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-comment\">// ===========在app中注册路由===========</span>\napp.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-string\">&quot;/user&quot;</span>, <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./router/user&quot;</span>));</code></pre><p>编辑<code>user.js</code>：</p>\n<pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-keyword\">var</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;express&quot;</span>);\n<span class=\"hljs-keyword\">var</span> router = express.<span class=\"hljs-title class_\">Router</span>();\n\n<span class=\"hljs-keyword\">var</span> users = [\n  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;张三&quot;</span> },\n  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;李四&quot;</span> },\n  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;王五&quot;</span> }\n];\n\n<span class=\"hljs-comment\">// 统一设置 head 信息</span>\nrouter.<span class=\"hljs-title function_\">all</span>(<span class=\"hljs-string\">&quot;*&quot;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res, next</span>) {\n  <span class=\"hljs-comment\">// 跨域请求时是否携带cookie</span>\n  res.<span class=\"hljs-title function_\">header</span>(<span class=\"hljs-string\">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class=\"hljs-literal\">true</span>);\n  <span class=\"hljs-comment\">// 允许跨域</span>\n  res.<span class=\"hljs-title function_\">header</span>(<span class=\"hljs-string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"hljs-string\">&quot;*&quot;</span>);\n  res.<span class=\"hljs-title function_\">header</span>(\n    <span class=\"hljs-string\">&quot;Access-Control-Allow-Headers&quot;</span>,\n    <span class=\"hljs-string\">&quot;Origin, X-Requested-With, Content-Type, Accept&quot;</span>\n  );\n  res.<span class=\"hljs-title function_\">header</span>(<span class=\"hljs-string\">&quot;Access-Control-Allow-Methods&quot;</span>, <span class=\"hljs-string\">&quot;PUT,POST,GET,DELETE,OPTIONS&quot;</span>);\n  res.<span class=\"hljs-title function_\">header</span>(<span class=\"hljs-string\">&quot;Content-Type&quot;</span>, <span class=\"hljs-string\">&quot;application/json;charset=utf-8&quot;</span>);\n  <span class=\"hljs-comment\">// 调用next</span>\n  <span class=\"hljs-title function_\">next</span>();\n});\n\n<span class=\"hljs-comment\">// app.js中是在 /user 后引用的，所以 /user/id/1 才能进行匹配</span>\n\n<span class=\"hljs-comment\">//定义一个get请求</span>\nrouter.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;/id/:id&quot;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res, next</span>) {\n  <span class=\"hljs-keyword\">var</span> queryid = req.<span class=\"hljs-property\">params</span>.<span class=\"hljs-property\">id</span> || <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-keyword\">var</span> user = {};\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; users.<span class=\"hljs-property\">length</span>; i++) {\n    <span class=\"hljs-keyword\">if</span> (queryid == users[i].<span class=\"hljs-property\">id</span>) {\n      <span class=\"hljs-comment\">// 返回信息</span>\n      user = users[i];\n    }\n  }\n  <span class=\"hljs-comment\">// 返回信息</span>\n  res.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(user));\n});\n\n<span class=\"hljs-comment\">// post请求</span>\nrouter.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">&quot;/id&quot;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res, next</span>) {\n  <span class=\"hljs-comment\">// req.param(“id”) 已舍弃</span>\n  <span class=\"hljs-keyword\">var</span> queryid = req.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">id</span> || <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-keyword\">var</span> user = {};\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; users.<span class=\"hljs-property\">length</span>; i++) {\n    <span class=\"hljs-keyword\">if</span> (queryid == users[i].<span class=\"hljs-property\">id</span>) {\n      <span class=\"hljs-comment\">// 返回信息</span>\n      user = users[i];\n    }\n  }\n  <span class=\"hljs-comment\">// 返回信息</span>\n  res.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(user));\n});\n\nrouter.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;/all&quot;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res, next</span>) {\n  <span class=\"hljs-comment\">// 返回用户列表</span>\n  res.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(users));\n});\n\n<span class=\"hljs-comment\">// 导出模块，以供require</span>\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = router;</code></pre><p>重新运行后，访问（要加上/user）<code>http://127.0.0.1:8888/user/all</code>、<code>http://127.0.0.1:8888/user/id/1</code>可看到对应信息，但是使用 post 请求<code>http://127.0.0.1:8888/user/id</code>时控制台会发出错误，要解析 post 请求的 body 还需要引入中间件。</p>\n<p>在<code>app.js</code>中加入：</p>\n<pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-comment\">// 通常使用body-parser进行post参数的解析,不添加该项依赖，req.body为undefined</span>\n<span class=\"hljs-keyword\">var</span> bodyParser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;body-parser&quot;</span>);\n\napp.<span class=\"hljs-title function_\">use</span>(bodyParser.<span class=\"hljs-title function_\">json</span>());\napp.<span class=\"hljs-title function_\">use</span>(bodyParser.<span class=\"hljs-title function_\">urlencoded</span>({ <span class=\"hljs-attr\">extended</span>: <span class=\"hljs-literal\">false</span> }));</code></pre><p>然后就可以正常解析 post 请求。</p>\n<h3 id=\"连接 mysql 数据库\">连接 mysql 数据库<a name=\"连接 mysql 数据库\" class=\"headerlink\" href=\"#连接 mysql 数据库\"></a></h3><p><code>npm</code>安装 <code>mysql</code>：</p>\n<pre class=\"hljs language-bash\" hljs-language=\"bash\"><code style=\"display:block;\">npm i mysql --save\n</code></pre><h4 id=\"基本使用\">基本使用<a name=\"基本使用\" class=\"headerlink\" href=\"#基本使用\"></a></h4><p>新建 <code>mysql.js</code>：</p>\n<pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-comment\">// 引入模块</span>\n<span class=\"hljs-keyword\">var</span> mysql = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;mysql&quot;</span>);\n\n<span class=\"hljs-comment\">// 基本使用</span>\n<span class=\"hljs-keyword\">var</span> connection = mysql.<span class=\"hljs-title function_\">createConnection</span>({\n  <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">&quot;localhost&quot;</span>,\n  <span class=\"hljs-attr\">port</span>: <span class=\"hljs-string\">&quot;3306&quot;</span>,\n  <span class=\"hljs-attr\">user</span>: <span class=\"hljs-string\">&quot;root&quot;</span>, <span class=\"hljs-comment\">// 数据库连接用户名</span>\n  <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&quot;123456&quot;</span>, <span class=\"hljs-comment\">// 连接密码</span>\n  <span class=\"hljs-attr\">database</span>: <span class=\"hljs-string\">&quot;test_db&quot;</span> <span class=\"hljs-comment\">// 连接数据库</span>\n});\n\nconnection.<span class=\"hljs-title function_\">connect</span>();\n\n<span class=\"hljs-comment\">//查询</span>\nconnection.<span class=\"hljs-title function_\">query</span>(<span class=\"hljs-string\">&quot;select * from `admin`&quot;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, rows, fields</span>) {\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;查询结果为: &quot;</span>, rows, fields);\n});\n<span class=\"hljs-comment\">//关闭连接</span>\nconnection.<span class=\"hljs-title function_\">end</span>();</code></pre><p>运行<code>node mysql.js</code>查看结果。</p>\n<h4 id=\"使用连接池\">使用连接池<a name=\"使用连接池\" class=\"headerlink\" href=\"#使用连接池\"></a></h4><p>编辑<code>mysql.js</code>：</p>\n<pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-keyword\">var</span> mysql = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;mysql&quot;</span>);\n\n<span class=\"hljs-comment\">// 连接池，默认10个连接数</span>\n<span class=\"hljs-keyword\">var</span> pool = mysql.<span class=\"hljs-title function_\">createPool</span>({\n  <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">&quot;localhost&quot;</span>,\n  <span class=\"hljs-attr\">port</span>: <span class=\"hljs-string\">&quot;3306&quot;</span>,\n  <span class=\"hljs-attr\">user</span>: <span class=\"hljs-string\">&quot;root&quot;</span>, <span class=\"hljs-comment\">// 数据库连接用户名</span>\n  <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&quot;123456&quot;</span>, <span class=\"hljs-comment\">// 连接密码</span>\n  <span class=\"hljs-attr\">database</span>: <span class=\"hljs-string\">&quot;test_db&quot;</span>, <span class=\"hljs-comment\">// 连接数据库</span>\n  <span class=\"hljs-attr\">multipleStatements</span>: <span class=\"hljs-literal\">true</span>\n});\n\n<span class=\"hljs-keyword\">var</span> query = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">{ sql, obj, success, fail }</span>) {\n  obj = obj || <span class=\"hljs-string\">&quot;&quot;</span>;\n  pool.<span class=\"hljs-title function_\">getConnection</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, conn</span>) {\n    <span class=\"hljs-keyword\">if</span> (err) {\n      <span class=\"hljs-comment\">// 失败回调</span>\n      <span class=\"hljs-title function_\">fail</span>(err);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// sql，obj 预编译，后面可以看到</span>\n      conn.<span class=\"hljs-title function_\">query</span>(sql, obj, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">qerr, vals, fields</span>) {\n        <span class=\"hljs-comment\">// 释放连接</span>\n        conn.<span class=\"hljs-title function_\">release</span>();\n        <span class=\"hljs-comment\">// 成功回调</span>\n        <span class=\"hljs-title function_\">success</span>(qerr, vals, fields);\n      });\n    }\n  });\n};\n\n<span class=\"hljs-comment\">// 导出模块</span>\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = query;</code></pre><p>编辑<code>user.js</code>：</p>\n<pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-comment\">// 引入</span>\n<span class=\"hljs-keyword\">var</span> query = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;../mysql&quot;</span>);\n\n<span class=\"hljs-comment\">// 修改 get 请求的控制器</span>\nrouter.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;/id/:id&quot;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res, next</span>) {\n  <span class=\"hljs-keyword\">var</span> queryid = req.<span class=\"hljs-property\">params</span>.<span class=\"hljs-property\">id</span> || <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-keyword\">var</span> user = {};\n\n  <span class=\"hljs-title function_\">query</span>({\n    <span class=\"hljs-comment\">// sql 预编译</span>\n    <span class=\"hljs-attr\">sql</span>: <span class=\"hljs-string\">&quot;select * from `user` where id = ?&quot;</span>,\n    <span class=\"hljs-attr\">obj</span>: queryid,\n    <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">err, vals, fields</span>) =&gt;</span> {\n      res.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(vals));\n    },\n    <span class=\"hljs-attr\">fail</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> {\n      res.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>([]));\n    }\n  });\n});</code></pre><p>重新运行、访问<code>http://localhost:8888/user/id/1</code>（前提创建好相应数据库表结构）。</p>\n<h3 id=\"log4js 日志使用\">log4js 日志使用<a name=\"log4js 日志使用\" class=\"headerlink\" href=\"#log4js 日志使用\"></a></h3><p>安装模块：</p>\n<pre class=\"hljs language-bash\" hljs-language=\"bash\"><code style=\"display:block;\">npm i log4js --save</code></pre><p>log4js 配置说明（还不是很清楚，简单按照官方配置）：</p>\n<pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\">{\n  <span class=\"hljs-string\">&quot;appenders&quot;</span>: {\n    <span class=\"hljs-string\">&quot;everything&quot;</span>: {\n      <span class=\"hljs-comment\">// 文件日志</span>\n      <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;file&quot;</span>,\n      <span class=\"hljs-comment\">// 文件名：logs/all-the-logs.log</span>\n      <span class=\"hljs-string\">&quot;filename&quot;</span>: <span class=\"hljs-string\">&quot;logs/all-the-logs.log&quot;</span>\n    },\n    <span class=\"hljs-string\">&quot;emergencies&quot;</span>: {\n      <span class=\"hljs-comment\">// 文件日志</span>\n      <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;file&quot;</span>,\n      <span class=\"hljs-comment\">// 文件名：logs/oh-no-not-again.log</span>\n      <span class=\"hljs-string\">&quot;filename&quot;</span>: <span class=\"hljs-string\">&quot;logs/oh-no-not-again.log&quot;</span>\n    },\n    <span class=\"hljs-string\">&quot;just-errors&quot;</span>: {\n      <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;logLevelFilter&quot;</span>,\n      <span class=\"hljs-comment\">// emergencies 只记录error级日志，</span>\n      <span class=\"hljs-comment\">// 即 logs/oh-no-not-again.log 中记录错误日志</span>\n      <span class=\"hljs-string\">&quot;appender&quot;</span>: <span class=\"hljs-string\">&quot;emergencies&quot;</span>,\n      <span class=\"hljs-string\">&quot;level&quot;</span>: <span class=\"hljs-string\">&quot;error&quot;</span>\n    }\n  },\n  <span class=\"hljs-string\">&quot;categories&quot;</span>: {\n    <span class=\"hljs-string\">&quot;default&quot;</span>: {\n      <span class=\"hljs-string\">&quot;appenders&quot;</span>: [\n        <span class=\"hljs-string\">&quot;just-errors&quot;</span>,\n        <span class=\"hljs-string\">&quot;everything&quot;</span>\n      ],\n      <span class=\"hljs-string\">&quot;level&quot;</span>: <span class=\"hljs-string\">&quot;debug&quot;</span>\n    }\n  }\n}</code></pre><p>把 log4js 配置写在 <code>config/log4js.json</code> 中（注意 json 中不能有注释）。</p>\n<p><code>app.js</code>中引入 <code>log4js</code>：</p>\n<pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-comment\">// add log4js</span>\n<span class=\"hljs-keyword\">var</span> log4js = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;log4js&quot;</span>);\n\n<span class=\"hljs-comment\">// 使用 config/log4js.json 的配置</span>\nlog4js.<span class=\"hljs-title function_\">configure</span>(<span class=\"hljs-string\">&quot;./config/log4js.json&quot;</span>);\n<span class=\"hljs-comment\">// 页面请求日志, level用auto时</span>\napp.<span class=\"hljs-title function_\">use</span>(log4js.<span class=\"hljs-title function_\">connectLogger</span>(log4js.<span class=\"hljs-title function_\">getLogger</span>(<span class=\"hljs-string\">&quot;http&quot;</span>), { <span class=\"hljs-attr\">level</span>: <span class=\"hljs-string\">&quot;auto&quot;</span> }));</code></pre><p>创建<code>log</code>目录，再重新运行，可以看到<code>log</code>目录下生成了两个日志文件。访问链接后发现日志中的内容会自动记录。</p>\n<p>主动打印日志，在<code>router/user.js</code>中：</p>\n<pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-comment\">// 引入log4js</span>\n<span class=\"hljs-keyword\">var</span> logger = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;log4js&quot;</span>).<span class=\"hljs-title function_\">getLogger</span>(<span class=\"hljs-string\">&quot;user&quot;</span>);\n\n<span class=\"hljs-comment\">// 然后使用 logger 可进行日志记录</span>\nlogger.<span class=\"hljs-title function_\">debug</span>(<span class=\"hljs-string\">&quot;Some debug handle&quot;</span>);\n\nlogger.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&quot;some error&quot;</span>);</code></pre><h3 id=\"结束\">结束<a name=\"结束\" class=\"headerlink\" href=\"#结束\"></a></h3><p>至此，一个小型、全面的服务器就搭建完成了。但是，现在每个方面只是了解性地接触了，日后如果要使用的话，必定是要再深入的。总之，先是对 Node.js 的使用有了初步的认识了。</p>\n","hash":"f243ab1bd311474cb91979f9d76e648a","isArticle":true,"sort":0,"filename":"","raw":"","prev":{"id":"http-get-request-cache","slug":"post/http-get-request-cache","path":"/post/http-get-request-cache","title":"ajax请求缓存","comments":true,"published":true,"date":"2017-09-17T19:41:45.000Z","updated":"","tags":[],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]}],"excerpt":"<p>浏览器的 GET 请求默认会有缓存，包括 ajax 的 GET 请求。</p>\n<p>如果两次请求的 url 相同的话，浏览器（不同缓存机制的浏览器会有所不同）会直接读取缓存里第一次请求的结果给第二次请求。</p>\n<p>缓存要缓存的好处，但有时我们并不需要 ajax 的请求被缓存。解决方式很简单只需更改请求的 url 即可，常用的就是加上时间戳，如下：</p>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-title function_\">ajax</span>(<span class=\"hljs-string\">`https://example.com?t=<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">Date</span>.now()}</span>`</span>)</code></pre>","more":"","hash":"30b0a828c3825eaf8525133794028889","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""},"next":{"id":"html5-indexdb","slug":"post/html5-indexdb","path":"/post/html5-indexdb","title":"IndexedDB的简单使用","comments":true,"published":true,"date":"2017-11-10T23:19:49.000Z","updated":"","tags":[{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","postCount":16,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","slug":"categories/JavaScript","path":"/categories/JavaScript","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":11,"postIds":[]}],"excerpt":"<p>使用 IndexedDB 在前端对数据进行缓存，简单记录用法。</p>\n<blockquote>\n<p>IndexedDB 是一种低级 API，用于客户端存储大量结构化数据(包括, 文件/ blobs)。该 API 使用索引来实现对该数据的高性能搜索。</p>\n</blockquote>\n","more":"","hash":"18a78607854650204f8498fa9059ba03","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""}}