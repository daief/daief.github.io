{"id":"electron-file-association","slug":"post/electron-file-association","path":"/post/electron-file-association","title":"Electron 实现文件关联","comments":true,"published":true,"date":"2023-05-04T11:45:57.000Z","updated":"","tags":[{"id":"ad7123e6c402c7d6c71d0a1032463ea3","name":"桌面开发","postCount":1,"postIds":[]},{"id":"0df2da9cf88450e6758356da45b4d04f","name":"Electron","postCount":1,"postIds":[]},{"id":"9c7fbd4a02af897333481b3df892fddf","name":"Inno Setup","postCount":1,"postIds":[]}],"categories":[],"excerpt":"<p>最近在做一个 Electron 桌面应用，需要实现文件关联，把特定后缀的文件关联到应用上，双击文件可以直接打开应用并读取文件。</p>\n<p>文件关联与操作系统相关性比较大，不同的操作系统实现方式也会不同。不过如果使用 <a href=\"https://www.electron.build/\">electron-builder</a> 进行应用打包，可以直接通过 <a href=\"configuration/configuration.html#overridable-per-platform-options\">fileAssociations</a> 配置来实现文件关联。</p>\n<p>而我这边使用 <a href=\"https://github.com/electron/electron-packager\">electron-packager</a> 打包，不会直接产出安装程序，所以需要自行实现文件关联，同时可以借机进一步了解 Windows 和 Mac 实现文件关联的细节。</p>\n","more":"\n\n<h1 id=\"文件关联\">文件关联<a name=\"文件关联\" class=\"headerlink\" href=\"#文件关联\"></a></h1><p>文件关联的实现和表现在不同的操作系统上会有所不同，但核心期望是一致的：</p>\n<ul>\n<li>应用安装完成后，特定的文件类型会自动关联到应用上，文件图标需要根据配置有所变化</li>\n<li>双击能够直接通过目标应用打开；或者右键在其他应用中能够选择目标应用</li>\n<li>应用卸载后，文件关联需要解除、文件图标显示的恢复</li>\n</ul>\n<h2 id=\"Windows\">Windows<a name=\"Windows\" class=\"headerlink\" href=\"#Windows\"></a></h2><p>Windows 的文件关联是通过注册表实现的，注册表中的 <code>HKEY_CLASSES_ROOT（HKCR）</code> 节点包含了文件扩展名关联信息。</p>\n<blockquote>\n<p>在实际的注册表中，不推荐直接修改 <code>HKEY_CLASSES_ROOT</code>，而是修改 <code>HKEY_CURRENT_USER\\Software\\Classes</code> 或 <code>HKEY_LOCAL_MACHINE\\Software\\Classes</code>。</p>\n<p><code>HKEY_CLASSES_ROOT</code> 是 <code>HKEY_LOCAL_MACHINE\\Software\\Classes</code> 和 <code>HKEY_CURRENT_USER\\Software\\Classes</code> 的合并，如果两个节点中都有相同的键，那么 <code>HKEY_CURRENT_USER\\Software\\Classes</code> 会覆盖 <code>HKEY_LOCAL_MACHINE\\Software\\Classes</code> 中的键。</p>\n<p>本文为了表述方便，都直接使用 <code>HKEY_CLASSES_ROOT</code>。</p>\n</blockquote>\n<p>打开“注册表编辑器”，找到其中 <code>HKEY_CLASSES_ROOT\\.js</code> 节点，该节点存储了 <code>.js</code> 文件类型的关联信息；<code>HKEY_CLASSES_ROOT\\VSCode.js</code> 节点存储了 <code>.js</code> 文件类型的默认应用信息。</p>\n<blockquote>\n<p>注：这里是以 vscode 的注册表信息为例，需要安装了 vscode 才会有这些内容。</p>\n</blockquote>\n<p><img alt=\"1-registry-js.png\" loading=\"lazy\" title=\"1-registry-js.png\" class=\"post-image \" src=\"/images/fee447212582ebb2a95261a7c2377905.1-registry-js.png\" onerror=\"this.onerror=null;this.src='/images/image-error.jpg';\"></p>\n<p>要实现文件关联，就要做到图中的效果，根据理解，主要包含两个步骤：</p>\n<ol>\n<li><p>注册应用程序 ProgId，即图中的 <code>VSCode.js</code></p>\n<ul>\n<li>DefaultIcon：设置文件图标</li>\n<li>shell\\open\\command：设置通过文件打开时的命令，<code>%1</code> 就是目标文件的路径，这里会影响程序中的读取</li>\n</ul>\n</li>\n<li><p>注册文件扩展名关联信息，即图中的 <code>.js</code>，在 <code>OpenWithProgids</code> 中设置关联的应用程序，上图中的 <code>VSCode.js</code> 就是关联的目标应用</p>\n</li>\n</ol>\n<p>我的应用程序使用 <code>Inno Setup</code> 制作安装程序，基于 <code>Inno Setup</code> 可以很方便地在安装/卸载过程修改注册表。</p>\n<p>比如有一个 <code>MyProg.exe</code> 程序，想要关联 <code>.myp</code> 后缀的文件，那么 Inno Setup 脚本可以是这样（只保留了关键信息）：</p>\n<pre class=\"hljs language-ini\" hljs-language=\"ini\"><code style=\"display:block;\"><span class=\"hljs-section\">[Setup]</span>\n<span class=\"hljs-comment\">; 这一行能在安装/卸载之后自动刷新资源管理器，避免图标缓存的问题</span>\n<span class=\"hljs-attr\">ChangesAssociations</span>=<span class=\"hljs-literal\">yes</span>\n\n<span class=\"hljs-section\">[Registry]</span>\n<span class=\"hljs-comment\">; 创建 ProgID</span>\nRoot: HKCR<span class=\"hljs-comment\">; SubKey: &quot;MyProg.myp&quot;; ValueData: &quot;myp 自定义文件&quot;; ValueType: string; Flags: uninsdeletekey noerror;</span>\n\n<span class=\"hljs-comment\">; 图标设置成应用程序的图标</span>\nRoot: HKCR<span class=\"hljs-comment\">; SubKey: &quot;MyProg.myp\\DefaultIcon&quot;; ValueData: &quot;{app}\\{#appExe}&quot;; ValueType: string; Flags: uninsdeletekey noerror;</span>\n\n<span class=\"hljs-comment\">; 指定打开文件的命令，设置传参方式</span>\nRoot: HKCR<span class=\"hljs-comment\">; Subkey: &quot;MyProg.myp\\shell\\open\\command&quot;; ValueType: string; ValueName: &quot;&quot;; ValueData: &quot;{app}\\{#appExe} --open-file=&quot;&quot;%1&quot;&quot;&quot;; Flags: uninsdeletekey</span>\n\n<span class=\"hljs-comment\">; 指定 .myp 文件的 ProgID</span>\nRoot: HKCR<span class=\"hljs-comment\">; Subkey: &quot;.myp\\OpenWithProgids&quot;; ValueType: string; ValueName: &quot;MyProg.myp&quot;; ValueData: &quot;&quot;; Flags: uninsdeletekey</span></code></pre><blockquote>\n<p>实际上对于文件关联功能，可以使用 Inno Setup 的可视化操作设置关联信息，设置完之后生成脚本、再进行修改</p>\n</blockquote>\n<p>如此便完成了文件关联的设置，安装完成后，<code>.myp</code> 文件会自动关联到 <code>MyProg.exe</code> 上，双击文件就可以直接打开应用了。除此之外，还可以在右键菜单上透出应用信息，当默认关联的程序不是目标程序时，可以快速找到目标程序，效果以及相应的注册表信息如下：</p>\n<p><img alt=\"2-rightclick-open.png\" loading=\"lazy\" title=\"2-rightclick-open.png\" class=\"post-image \" src=\"/images/35c45fd86cd9e9a0295966f07eaf9f63.2-rightclick-open.png\" onerror=\"this.onerror=null;this.src='/images/image-error.jpg';\"></p>\n<p>相应脚本逻辑如下：</p>\n<pre class=\"hljs language-ini\" hljs-language=\"ini\"><code style=\"display:block;\"><span class=\"hljs-section\">[Registry]</span>\n<span class=\"hljs-comment\">; 设置右键内容</span>\nRoot: HKCR<span class=\"hljs-comment\">; Subkey: &quot;*\\shell\\MyProg&quot;; ValueType: string; ValueName: &quot;&quot;; ValueData: &quot;通过 MyProg 打开&quot;; Flags: uninsdeletekey</span>\n\n<span class=\"hljs-comment\">; 设置右键打开的命令</span>\nRoot: HKCR<span class=\"hljs-comment\">; Subkey: &quot;*\\shell\\MyProg\\command&quot;; ValueType: string; ValueName: &quot;&quot;; ValueData: &quot;{app}\\{#appExe} --open-file=&quot;&quot;%1&quot;&quot;&quot;; Flags: uninsdeletekey</span>\n\n<span class=\"hljs-comment\">; 设置右键的图标</span>\nRoot: HKCR<span class=\"hljs-comment\">; Subkey: &quot;*\\shell\\MyProg&quot;; ValueType: string; ValueName: &quot;Icon&quot;; ValueData: &quot;{app}\\{#appExe}&quot;; Flags: uninsdeletekey</span></code></pre><h3 id=\"刷新图标\">刷新图标<a name=\"刷新图标\" class=\"headerlink\" href=\"#刷新图标\"></a></h3><p>基于 Inno Setup，通过设置 <code>ChangesAssociations=yes</code>，可以在安装/卸载之后自动刷新资源管理器，避免图标缓存的问题。</p>\n<p>如果不是使用 Inno Setup 或是其他不支持这种快捷方式的工具，可以通过调用 <a href=\"https://github.com/crazy-max/IconsRefresh/\">IconsRefresh</a> 来实现刷新。</p>\n<p>网上的一些实现都需要重启电脑或资源管理器，体验不是很好。这个工具无需任何重启，通过调用系统 API 来通知资源管理器刷新。</p>\n<h2 id=\"Mac\">Mac<a name=\"Mac\" class=\"headerlink\" href=\"#Mac\"></a></h2><p>在 Mac 上实现文件关联就比较简单了，对于应用程序，相关内容都在程序清单中，只需要在 <code>Info.plist</code> 中添加 <code>CFBundleDocumentTypes</code> 节点即可，如下：</p>\n<pre class=\"hljs language-xml\" hljs-language=\"xml\"><code style=\"display:block;\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>CFBundleDocumentTypes<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">array</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dict</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- 定义后缀 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>CFBundleTypeExtensions<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">array</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span>js<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">array</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 定义图标 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>CFBundleTypeIconFile<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span>icon.icns<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 定义描述 --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>CFBundleTypeName<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span>JavaScript File<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 定义类型，可选为 Viewer | Editor | Shell | None --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>CFBundleTypeRole<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span>Editor<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- 定义优先级，可选为 Owner | Alternate | None --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>LSHandlerRank<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span>Owner<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dict</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">array</span>&gt;</span></code></pre><p>我没有找到在 Mac 上任何通过脚本或用户操作去主动刷新图标的方式，当然对于 Mac 原生开发了解不多，也许有我不知道的方式。但经过实际测试，应用程序安装之后是可以直接生效的。</p>\n<blockquote>\n<p>在测试的过程中发现设置的图标始终不生效（即使删除重装也没效果），不知道是不是玄学，把 CFBundleTypeIconFile 调整为紧跟在 CFBundleTypeExtensions 后面，重新打包安装后就立刻生效了。</p>\n</blockquote>\n<h1 id=\"Electron 读取文件\">Electron 读取文件<a name=\"Electron 读取文件\" class=\"headerlink\" href=\"#Electron 读取文件\"></a></h1><p>因为实现方式的不同，导致 Electron 在不同系统上读取文件的方式也有所不同。</p>\n<p>对于 Windows，前文在注册表的打开方式中都定义了 <code>--open-file=&quot;%1&quot;</code>，这样在应用程序启动时，就会接收到一个 <code>--open-file=&quot;C:\\Users\\XXX\\Desktop\\test.myp&quot;</code> 的参数，通过 <code>process.argv</code> 的具名参数就可以获取到文件路径了。</p>\n<p>不少 Electron 应用会保持单例的模式，即当 <code>app.requestSingleInstanceLock()</code> 为非时，退出 app。而当应用程序已经启动时，再次打开文件，就会进入这个逻辑，这时候需要把参数进行透传，即：</p>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-keyword\">if</span> (\n  !app.<span class=\"hljs-title function_\">requestSingleInstanceLock</span>({\n    <span class=\"hljs-attr\">openFile</span>: argv.<span class=\"hljs-property\">openFile</span>,\n  })\n) {\n  app.<span class=\"hljs-title function_\">exit</span>();\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-comment\">// ...</span>\n}</code></pre><p>同时会触发 <code>second-instance</code> 事件，通过回调参数获取文件路径。</p>\n<p>对于 Mac，事情又简单了，监听 <code>open-file</code> 事件即可，通过回调参数获取文件路径。</p>\n<p>总体逻辑大概如下：</p>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-keyword\">const</span> { argv } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;yargs&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> argvParser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;yargs-parser&#x27;</span>);\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">main</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-comment\">// 控制单例</span>\n  <span class=\"hljs-keyword\">if</span> (\n    !app.<span class=\"hljs-title function_\">requestSingleInstanceLock</span>({\n      <span class=\"hljs-attr\">openFile</span>: argv.<span class=\"hljs-property\">openFile</span>,\n    })\n  ) {\n    app.<span class=\"hljs-title function_\">exit</span>();\n    <span class=\"hljs-keyword\">return</span>;\n  }\n\n  <span class=\"hljs-keyword\">if</span> (process.<span class=\"hljs-property\">platform</span> === <span class=\"hljs-string\">&#x27;darwin&#x27;</span>) {\n    <span class=\"hljs-comment\">// Mac</span>\n    app.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;open-file&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e, filepath</span>) =&gt;</span> {\n      <span class=\"hljs-comment\">// ...</span>\n    });\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// Windows</span>\n    <span class=\"hljs-comment\">// 第一次启动</span>\n    <span class=\"hljs-keyword\">const</span> filepath = argv.<span class=\"hljs-property\">openFile</span>;\n\n    <span class=\"hljs-comment\">// 运行状态再次打开</span>\n    app.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;second-instance&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e, argvs</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">const</span> argvObject = <span class=\"hljs-title function_\">argvParser</span>(argvs);\n      <span class=\"hljs-keyword\">const</span> secondFilepath = argvObject.<span class=\"hljs-property\">openFile</span>;\n    });\n  }\n};\n\n<span class=\"hljs-title function_\">main</span>();</code></pre><h1 id=\"结语\">结语<a name=\"结语\" class=\"headerlink\" href=\"#结语\"></a></h1><p>文件关联是常见的需求，本身并不复杂，但由于原生应用开发知识的匮乏，期间找了不少资料、也问了 GPT，从完全不了解到有了头绪，总归是有了一些收获。</p>\n<p>期间在图标缓存问题上搞了很久，一开始并不知道 Inno Setup 可以设置 ChangeAssociations 来实现资源管理器的刷新，而是找了很多资料、尝试去自行现实，而各种方式的效果还都不理想。再后来找到了 IconsRefresh，发现这个工具的效果是我想要的，并进行了接入。完了之后看到 Inno Setup 直接有这个属性，一口老血，多费了不少时间。</p>\n<hr>\n<p>参考资料：</p>\n<ul>\n<li>注册表：<a href=\"https://learn.microsoft.com/zh-cn/windows/win32/sysinfo/registry\">https://learn.microsoft.com/zh-cn/windows/win32/sysinfo/registry</a></li>\n<li>文件类型：<a href=\"https://learn.microsoft.com/zh-cn/windows/win32/shell/fa-file-types\">https://learn.microsoft.com/zh-cn/windows/win32/shell/fa-file-types</a></li>\n<li>“黑客”入门学习之“Windows 注册表”：<a href=\"https://www.toutiao.com/article/6633692159113429512/\">https://www.toutiao.com/article/6633692159113429512/</a></li>\n<li>“打开方式”的“打开方式”：<a href=\"https://geelaw.blog/entries/windows-fileassoc-walkthru/#register-fileassoc\">https://geelaw.blog/entries/windows-fileassoc-walkthru/#register-fileassoc</a></li>\n<li>如何自定义右键菜单：<a href=\"https://answers.microsoft.com/zh-hans/windows/forum/all/%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89win11/c1050975-64cf-425c-b940-9aeda0ed714c\">https://answers.microsoft.com/zh-hans/windows/forum/all/%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89win11/c1050975-64cf-425c-b940-9aeda0ed714c</a></li>\n<li>如何刷新 explorer.exe 图标缓存：<a href=\"https://lazywang.life/2022/05/23/how-to-refresh-explorer-icon-cache/\">https://lazywang.life/2022/05/23/how-to-refresh-explorer-icon-cache/</a></li>\n</ul>\n","hash":"69a815e27e40b55a29f295a0dfa087c3","isArticle":true,"sort":0,"filename":"","raw":"","prev":{"id":"inno-setup","slug":"post/inno-setup","path":"/post/inno-setup","title":"Inno Setup","comments":true,"published":true,"date":"2023-04-07T11:28:06.000Z","updated":"","tags":[],"categories":[{"id":"ad7123e6c402c7d6c71d0a1032463ea3","name":"桌面开发","slug":"categories/桌面开发","path":"/categories/桌面开发","parentId":"","postCount":1,"postIds":[]}],"excerpt":"<p>最近工作上遇到了 Inno Setup，这对于我来说是个新东西，看不懂，那么就学一下吧。</p>\n","more":"","hash":"0c1c52bbcd5a2832d50b1e78b7b22d17","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""},"next":null}