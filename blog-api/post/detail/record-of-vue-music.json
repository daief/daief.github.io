{"id":"record-of-vue-music","slug":"post/record-of-vue-music","path":"/post/record-of-vue-music","title":"vue-music记录","comments":true,"published":true,"date":"2017-09-04T19:39:02.000Z","updated":"","tags":[{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","postCount":16,"postIds":[]},{"id":"558b544cf685f39d34e4903e39c38b67","name":"TypeScript","postCount":6,"postIds":[]},{"id":"2d8ec58babcec05d3fe8f712968de749","name":"Vue","postCount":5,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]}],"excerpt":"<p>使用 Vue（2.x）全家桶，仿造网易云音乐 pc 网页版制作的一个单页应用，接口使用<a href=\"https://github.com/Binaryify/NeteaseCloudMusicApi\">NeteaseCloudMusicApi</a>。</p>\n<p><del>演示链接</del>\n<a href=\"https://github.com/daief/vue-music\">项目链接</a></p>\n","more":"\n\n<h1 id=\"数据方面的处理简述\">数据方面的处理简述<a name=\"数据方面的处理简述\" class=\"headerlink\" href=\"#数据方面的处理简述\"></a></h1><p>使用中：\n<a href=\"https://github.com/Binaryify/NeteaseCloudMusicApi\">NeteaseCloudMusicApi</a></p>\n<p>最初的做法：\n<del>一个关键的问题是如何获得歌曲的 url，先看看网易云的链接，比如 id 为<code>25640828</code>的歌曲，对应的 url 是<code>http://m10.music.126.net/20170917181558/f1d4858ba2af5098b54f5261d821a76d/ymusic/7244/d140/31c4/acec84bc90b4e474bd3eeda288ad5617.mp3</code>，显然是经过加密处理的。因为不知道加密方案，无法通过 id 去获取对应的 url，所以使用了<code>http://link.hhtjim.com/</code>外链转换，歌曲的 url 格式形如：<code>http://link.hhtjim.com/25640828.mp3</code>。如此就能方便地知道歌曲所对应的 url。</del></p>\n<h1 id=\"实现过程中的问题记录\">实现过程中的问题记录<a name=\"实现过程中的问题记录\" class=\"headerlink\" href=\"#实现过程中的问题记录\"></a></h1><p>偷懒是坏文明，然而我…………</p>\n<h2 id=\"项目打包（npm run build）之后静态资源路径错误\">项目打包（npm run build）之后静态资源路径错误<a name=\"项目打包（npm run build）之后静态资源路径错误\" class=\"headerlink\" href=\"#项目打包（npm run build）之后静态资源路径错误\"></a></h2><h3 id=\"JS、CSS 等路径错误\">JS、CSS 等路径错误<a name=\"JS、CSS 等路径错误\" class=\"headerlink\" href=\"#JS、CSS 等路径错误\"></a></h3><p>webpack 配置：config/index.js</p>\n<pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-attr\">build</span>: {\n  <span class=\"hljs-attr\">env</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./prod.env&#x27;</span>),\n  <span class=\"hljs-attr\">index</span>: path.<span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&#x27;../dist/index.html&#x27;</span>),\n  <span class=\"hljs-attr\">assetsRoot</span>: path.<span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&#x27;../dist&#x27;</span>),\n  <span class=\"hljs-attr\">assetsSubDirectory</span>: <span class=\"hljs-string\">&#x27;static&#x27;</span>,\n  <span class=\"hljs-comment\">// 修改此处，默认是：assetsPublicPath: &#x27;/&#x27;</span>\n  <span class=\"hljs-attr\">assetsPublicPath</span>: <span class=\"hljs-string\">&#x27;./&#x27;</span>,\n  <span class=\"hljs-attr\">productionSourceMap</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">productionGzip</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">productionGzipExtensions</span>: [<span class=\"hljs-string\">&#x27;js&#x27;</span>, <span class=\"hljs-string\">&#x27;css&#x27;</span>],\n  <span class=\"hljs-attr\">bundleAnalyzerReport</span>: process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">npm_config_report</span>\n}</code></pre><h3 id=\"打包后 CSS 中的图片路径错误\">打包后 CSS 中的图片路径错误<a name=\"打包后 CSS 中的图片路径错误\" class=\"headerlink\" href=\"#打包后 CSS 中的图片路径错误\"></a></h3><p>路径会出现 <code>/static/css/static/img</code> 这样的重复现象，在 <code>build/utils.js</code> 中添加一行</p>\n<pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-keyword\">if</span> (options.<span class=\"hljs-property\">extract</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">ExtractTextPlugin</span>.<span class=\"hljs-title function_\">extract</span>({\n    <span class=\"hljs-attr\">use</span>: loaders,\n    <span class=\"hljs-attr\">fallback</span>: <span class=\"hljs-string\">&quot;vue-style-loader&quot;</span>,\n    <span class=\"hljs-comment\">// 新增 publicPath: &#x27;../../&#x27;</span>\n    <span class=\"hljs-attr\">publicPath</span>: <span class=\"hljs-string\">&quot;../../&quot;</span>\n  });\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">&quot;vue-style-loader&quot;</span>].<span class=\"hljs-title function_\">concat</span>(loaders);\n}</code></pre><h2 id=\"如何 watch 一个 vuex 中的状态\">如何 watch 一个 vuex 中的状态<a name=\"如何 watch 一个 vuex 中的状态\" class=\"headerlink\" href=\"#如何 watch 一个 vuex 中的状态\"></a></h2><p><code>stores/index.js</code>中，有一个 id 变量和对应的 getter</p>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">state</span>: {\n    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>\n  },\n  <span class=\"hljs-attr\">getters</span>: {\n    <span class=\"hljs-title class_\">Id</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">state</span> =&gt;</span> state.<span class=\"hljs-property\">id</span>\n  }\n  <span class=\"hljs-attr\">mutations</span>: {\n    <span class=\"hljs-title function_\">setId</span>(<span class=\"hljs-params\">state, newId</span>) {\n      state.<span class=\"hljs-property\">id</span> = newId\n    }\n  },\n  <span class=\"hljs-attr\">actions</span>: {\n    <span class=\"hljs-title function_\">setId</span>(<span class=\"hljs-params\">{commit}, id</span>) {\n      <span class=\"hljs-title function_\">commit</span>(<span class=\"hljs-string\">&#x27;setId&#x27;</span>, id)\n    }\n  }\n}</code></pre><p>在想要 watch 的组件中</p>\n<pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-keyword\">import</span> { mapGetters } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vuex&quot;</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">computed</span>: {\n    ...<span class=\"hljs-title function_\">mapGetters</span>([\n      <span class=\"hljs-string\">&quot;Id&quot;</span> <span class=\"hljs-comment\">// 与getters对应</span>\n    ])\n  },\n  <span class=\"hljs-attr\">watch</span>: {\n    <span class=\"hljs-comment\">// 这样就可以在任何组件调用commit(&#x27;setId&#x27;, xxx);时watch到全局state中id的变化</span>\n    <span class=\"hljs-title class_\">Id</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">newvalue, oldvalue</span>) {\n      <span class=\"hljs-comment\">// 处理</span>\n    }\n  }\n};</code></pre><h2 id=\"在 mounted 生命周期钩子中可以对 window 事件进行监听\">在 mounted 生命周期钩子中可以对 window 事件进行监听<a name=\"在 mounted 生命周期钩子中可以对 window 事件进行监听\" class=\"headerlink\" href=\"#在 mounted 生命周期钩子中可以对 window 事件进行监听\"></a></h2><pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-comment\">// ...</span>\n  <span class=\"hljs-title function_\">mounted</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// 对window滚动事件的监听</span>\n    <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;scroll&quot;</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">appScroll</span>);\n  }\n  <span class=\"hljs-comment\">// ...</span>\n};</code></pre><h2 id=\"在变量中保存静态图片路径，然后动态绑定到元素上\">在变量中保存静态图片路径，然后动态绑定到元素上<a name=\"在变量中保存静态图片路径，然后动态绑定到元素上\" class=\"headerlink\" href=\"#在变量中保存静态图片路径，然后动态绑定到元素上\"></a></h2><p>比如 App.vue，不能这样去做，因为 url 会被当成字符串处理，需要告诉 webpack 加载模块（此处指图片，图片也会被当成模块，<code>此处表述不知是否得当</code>）</p>\n<pre class=\"hljs language-html\" hljs-language=\"html\"><code style=\"display:block;\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">:src</span>=<span class=\"hljs-string\">&quot;url&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\">\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;app&quot;</span>,\n  <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&quot;./assets/avrtar.jpg&quot;</span>\n    };\n  },\n  <span class=\"hljs-attr\">watch</span>: {}\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><p>修改写法，App.vue</p>\n<pre class=\"hljs language-html\" hljs-language=\"html\"><code style=\"display:block;\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">:src</span>=<span class=\"hljs-string\">&quot;url&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\">\n<span class=\"hljs-comment\">// 导入</span>\n<span class=\"hljs-keyword\">import</span> avatar <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./assets/avrtar.jpg&quot;</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;app&quot;</span>,\n  <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-comment\">// 使用</span>\n      <span class=\"hljs-attr\">url</span>: avatar\n    };\n  },\n  <span class=\"hljs-attr\">watch</span>: {}\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><h2 id=\"2018-03-24 Mac 下 npm install 时报错\">2018-03-24 Mac 下 npm install 时报错<a name=\"2018-03-24 Mac 下 npm install 时报错\" class=\"headerlink\" href=\"#2018-03-24 Mac 下 npm install 时报错\"></a></h2><ol>\n<li><code>npm install</code> 失败</li>\n<li>终止安装后，提示更新 npm，<code>npm i -g npm</code> 失败</li>\n<li>权限问题使用 <code>sudo npm i -g npm</code>，删除 <code>node_modules</code> 后重新 <code>sudo npm install</code> 后成功<ul>\n<li>2018-09-18 补充（Mac）：提示无权限时可能是因为用户组的原因，多半因为被设置成<code>root</code>，而当前用户组不是<code>root</code>，<code>ll</code>可查看文件信息  包含用户组信息，<code>chown -R user ./dir</code>可将<code>./dir</code>的用户组改为<code>user</code></li>\n</ul>\n</li>\n</ol>\n<h1 id=\"2018-11-02 重写计划\">2018-11-02 重写计划<a name=\"2018-11-02 重写计划\" class=\"headerlink\" href=\"#2018-11-02 重写计划\"></a></h1><p>主要出于对 Vue 系列重新熟悉、学习的目的，并尝试使用 TypeScript 进行编写，基于 Vue 2.x、Vue Cli 3。</p>\n<p>新的记录文章：{% post_link happy-vue-with-typescript %}</p>\n","hash":"aebdd1f1c413052863eb33fc0f758003","isArticle":true,"sort":0,"filename":"","raw":"","prev":{"id":"learn-webpack","slug":"post/learn-webpack","path":"/post/learn-webpack","title":"webpack学习","comments":true,"published":true,"date":"2017-07-20T16:52:48.000Z","updated":"","tags":[{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","postCount":16,"postIds":[]},{"id":"424516ca53b4ad4bef37ed04f8795a88","name":"webpack","postCount":2,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]}],"excerpt":"<blockquote>\n<p>webpack 是近期最火的一款模块加载器兼打包工具，它能把各种资源，例如 JS（含 JSX）、coffee、样式（含 less/sass）、图片等都作为模块来使用和处理。\n我们可以直接使用 require(XXX) 的形式来引入各模块，即使它们可能需要经过编译（比如 JSX 和 sass），但我们无须在上面花费太多心思，因为 webpack 有着各种健全的加载器（loader）在默默处理这些事情。</p>\n</blockquote>\n<p><a href=\"http://webpack.github.io/\">webpack 官网</a></p>\n","more":"","hash":"25e655ed0f5b0814eb0fb35a6b1d4810","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""},"next":{"id":"install-java-tomcat-on-linux","slug":"post/install-java-tomcat-on-linux","path":"/post/install-java-tomcat-on-linux","title":"Linux-Java环境、Tomcat服务器的安装","comments":true,"published":true,"date":"2017-09-10T21:56:44.000Z","updated":"","tags":[{"id":"edc9f0a5a5d57797bf68e37364743831","name":"Linux","postCount":3,"postIds":[]},{"id":"46cff7c2e22c5fb804c02d5b561b39f8","name":"JDK","postCount":1,"postIds":[]},{"id":"8f72e28063c30c7468fb6af4653f4f9c","name":"Tomcat","postCount":1,"postIds":[]}],"categories":[{"id":"edc9f0a5a5d57797bf68e37364743831","name":"Linux","slug":"categories/Linux","path":"/categories/Linux","parentId":"","postCount":4,"postIds":[]}],"excerpt":"<p>CentOS 云主机上安装 Java 环境和 Tomcat 服务器。</p>\n","more":"","hash":"922b7695516b6cdb528635a8bd54ff5c","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""}}