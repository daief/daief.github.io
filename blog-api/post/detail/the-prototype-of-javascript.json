{"id":"the-prototype-of-javascript","slug":"post/the-prototype-of-javascript","path":"/post/the-prototype-of-javascript","title":"JavaScript 原型相关","comments":true,"published":true,"date":"2020-02-09T10:41:22.000Z","updated":"","tags":[{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","postCount":16,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","slug":"categories/JavaScript","path":"/categories/JavaScript","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":11,"postIds":[]}],"excerpt":"<p>一直以来没有系统地去学习过原型相关的知识概念，虽然平时直接使用不多，但时常会看到，有必要搞明白一点。</p>\n","more":"\n\n<h2 id=\"原型\">原型<a name=\"原型\" class=\"headerlink\" href=\"#原型\"></a></h2><p>主要涉及两个对象属性：<code>prototype</code> 和 <code>__proto__</code>。</p>\n<h3 id=\"prototype\">prototype<a name=\"prototype\" class=\"headerlink\" href=\"#prototype\"></a></h3><p>访问 <code>prototype</code> 表示访问一个对象的 <code>原型对象</code>。</p>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>);\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Foo</span>(<span class=\"hljs-params\"></span>) {}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Foo</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>);</code></pre><blockquote>\n<p>所有函数（function）都存在默认的原型对象，而实例对象默认没有 <code>prototype</code> 属性。</p>\n</blockquote>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Foo</span>(<span class=\"hljs-params\"></span>) {}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Foo</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>); <span class=\"hljs-comment\">// 输出原型对象</span>\n\n<span class=\"hljs-keyword\">const</span> foo = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(foo.<span class=\"hljs-title function_\">hasOwnProperty</span>(<span class=\"hljs-string\">&#x27;prototype&#x27;</span>)); <span class=\"hljs-comment\">// false</span></code></pre><p>对于 <code>原型对象</code>，没能找到比较正式的概念说明，不过具有以下特点和作用：</p>\n<ol>\n<li>是一个对象</li>\n<li>对象上有一个 <code>constructor</code> 属性，<strong>指向原型对象的构造函数、或者说函数本身</strong></li>\n<li>通过原型对象可以实现对象的属性继承，所有都过该构造器实例化得到的对象都能访问到原型对象上的属性和方法</li>\n</ol>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Foo</span>(<span class=\"hljs-params\"></span>) {}\n\n<span class=\"hljs-keyword\">const</span> foo = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>();\n\nfoo.<span class=\"hljs-property\">a</span>; <span class=\"hljs-comment\">// undefined</span>\n<span class=\"hljs-title class_\">Foo</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">a</span> = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Foo</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>);\n<span class=\"hljs-comment\">// {</span>\n<span class=\"hljs-comment\">//  a: 2</span>\n<span class=\"hljs-comment\">//  constructor: ƒ Foo()</span>\n<span class=\"hljs-comment\">//  __proto__: Object</span>\n<span class=\"hljs-comment\">// }</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Foo</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">constructor</span> === <span class=\"hljs-title class_\">Foo</span>); <span class=\"hljs-comment\">// true</span>\n\nfoo.<span class=\"hljs-property\">a</span>; <span class=\"hljs-comment\">// 2</span></code></pre><p><strong>对于原型对象的操作应慎重，会影响到所有的实例对象（包括已存在的对象）；同时应避免下面的写法：</strong></p>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Foo</span>(<span class=\"hljs-params\"></span>) {}\n\n<span class=\"hljs-comment\">// ❌ 会破坏原来的原型对象以及原型链</span>\n<span class=\"hljs-title class_\">Foo</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = {\n  <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">2</span>,\n  <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">3</span>,\n};\n\n<span class=\"hljs-comment\">// ✅ 需要同时添加多个属性时</span>\n<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">assign</span>(<span class=\"hljs-title class_\">Foo</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>, {\n  <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">2</span>,\n  <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">3</span>,\n});</code></pre><h3 id=\"__proto__\">__proto__<a name=\"__proto__\" class=\"headerlink\" href=\"#__proto__\"></a></h3><blockquote>\n<p>❗️ 虽然各大浏览都实现了该属性，但该属性不是语言的标准 ，不要直接在生产环境中使用。</p>\n<p>取而代之的应使用 <code>Object.getPrototypeOf()</code> 和 <code>Object.setPrototypeOf()</code> 访问器来访问，这等同于直接通过属性 <code>__proto__</code> 来操作。</p>\n</blockquote>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-keyword\">const</span> obj = {};\nobj.<span class=\"hljs-property\">__proto__</span> === <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">getPrototypeOf</span>(obj); <span class=\"hljs-comment\">// true</span></code></pre><p>为了方便书写，后文中依旧使用 <code>__proto__</code>。</p>\n<p><code>__proto__</code> 同样用于访问对象的 <code>原型对象</code>，与 <code>prototype</code> 不同的一点是所有对象（不包含 <code>null</code> 和 <code>undefined</code>）都默认存在该属性。该属性是一个内部属性，所以需要通过该节开头部分提到的特殊方式去访问。</p>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Foo</span>(<span class=\"hljs-params\"></span>) {}\n<span class=\"hljs-keyword\">const</span> foo = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>();\n\nfoo.<span class=\"hljs-property\">__proto__</span>; <span class=\"hljs-comment\">// 访问实例 foo 的原型对象</span>\n\n<span class=\"hljs-comment\">// 上一节可通过 Foo.prototype 访问到原型对象</span>\n<span class=\"hljs-comment\">// 实际上这两者是相等的</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(foo.<span class=\"hljs-property\">__proto__</span> === <span class=\"hljs-title class_\">Foo</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>); <span class=\"hljs-comment\">// true</span></code></pre><h3 id=\"原型链\">原型链<a name=\"原型链\" class=\"headerlink\" href=\"#原型链\"></a></h3><blockquote>\n<p>JavaScript 常被描述为一种基于原型的语言 (prototype-based language)——每个对象拥有一个原型对象，对象以其原型为模板、从原型继承方法和属性。原型对象也可能拥有原型，并从中继承方法和属性，一层一层、以此类推。这种关系常被称为原型链 (prototype chain)，它解释了为何一个对象会拥有定义在其他对象中的属性和方法。</p>\n</blockquote>\n<p>有如下对象，依次查看原型对象：</p>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Foo</span>(<span class=\"hljs-params\"></span>) {}\n<span class=\"hljs-title class_\">Foo</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">a</span> = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-keyword\">const</span> foo = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>();</code></pre><pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-comment\">// 等价于 Foo.prototype</span>\nfoo.<span class=\"hljs-property\">__proto__</span>;\n<span class=\"hljs-comment\">// {</span>\n<span class=\"hljs-comment\">//  a: 2</span>\n<span class=\"hljs-comment\">//  constructor: ƒ Foo()</span>\n<span class=\"hljs-comment\">//  __proto__: Object</span>\n<span class=\"hljs-comment\">// }</span></code></pre><pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-comment\">// 相当于查看 Foo `原型对象` 的 `原型对象`，即</span>\n<span class=\"hljs-comment\">// Foo.prototype.__proto__</span>\nfoo.<span class=\"hljs-property\">__proto__</span>.<span class=\"hljs-property\">__proto__</span>;\n<span class=\"hljs-comment\">// {</span>\n<span class=\"hljs-comment\">//  constructor: ƒ Object()</span>\n<span class=\"hljs-comment\">//  hasOwnProperty: ƒ hasOwnProperty()</span>\n<span class=\"hljs-comment\">//  isPrototypeOf: ƒ isPrototypeOf()</span>\n<span class=\"hljs-comment\">//  propertyIsEnumerable: ƒ propertyIsEnumerable()</span>\n<span class=\"hljs-comment\">//  toString: ƒ toString()</span>\n<span class=\"hljs-comment\">//  valueOf: ƒ valueOf()</span>\n<span class=\"hljs-comment\">//  toLocaleString: ƒ toLocaleString()</span>\n<span class=\"hljs-comment\">// }</span></code></pre><pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-comment\">// 一级级向上，最终指向 null</span>\nfoo.<span class=\"hljs-property\">__proto__</span>.<span class=\"hljs-property\">__proto__</span>.<span class=\"hljs-property\">__proto__</span>;\n<span class=\"hljs-comment\">// null</span></code></pre><p>可以发现 <code>foo.__proto__.__proto__.__proto__</code> 构成了一条原型链，当访问 <code>foo</code> 对象的属性或方法时，如果对象本身不存在时，就也按照这样的链一层层向上查找、直至找到或找不到。</p>\n<p>所以，可以看出实例对象 <code>foo</code> 为什么不仅能访问属性 <code>a</code>，还拥有 <code>hasOwnProperty</code>、<code>toString</code> 等方法：</p>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\">foo.<span class=\"hljs-property\">a</span>; <span class=\"hljs-comment\">// 2</span>\nfoo.<span class=\"hljs-title function_\">hasOwnProperty</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>); <span class=\"hljs-comment\">// false</span>\nfoo.<span class=\"hljs-title function_\">toString</span>(); <span class=\"hljs-comment\">// &#x27;[object Object]&#x27;</span></code></pre><blockquote>\n<p>❗️ 此外还需要注意：</p>\n<ul>\n<li>原型链的编辑应十分小心</li>\n<li>原型链不宜过长，会影响属性访问的耗时</li>\n</ul>\n</blockquote>\n<p>最后，在 JavaScript 中，所有的对象的原型都指向于 <code>Object</code>，最终指向 <code>null</code>。</p>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-keyword\">const</span> n = <span class=\"hljs-number\">1</span>;\nn.<span class=\"hljs-property\">__proto__</span>; <span class=\"hljs-comment\">// Number</span>\nn.<span class=\"hljs-property\">__proto__</span>.<span class=\"hljs-property\">__proto__</span>; <span class=\"hljs-comment\">// Object</span>\nn.<span class=\"hljs-property\">__proto__</span>.<span class=\"hljs-property\">__proto__</span>.<span class=\"hljs-property\">__proto__</span>; <span class=\"hljs-comment\">// null</span></code></pre><p>借用一张图总结一下：</p>\n<p><img alt=\"prototype-chain\" loading=\"lazy\"  title=\"prototype-chain\" class=\"post-image \" src=\"/images/ae576cba23f34f9273251a77c305658a.prototype-chain.jpg\" onerror=\"this.onerror=null;this.src='/images/image-error.jpg';\"></p>\n<h2 id=\"结语\">结语<a name=\"结语\" class=\"headerlink\" href=\"#结语\"></a></h2><p>就简单理解，这些就是指来指去的一个问题，理一理后也并不复杂，以及学习了原型对象的一个作用。</p>\n<p>原型、原型链是实现 JavaScript 面向对象编程的重要依据，下次可能学一学 <code>class</code>、<code>extends</code> 的原生实现，但现在看来应该也八九不离十了（<del>迷之自信</del>）。</p>\n<hr>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object_prototypes\">对象原型</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\">Object.prototype</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">继承与原型链</a></li>\n<li><a href=\"https://es6.ruanyifeng.com/#docs/class\">Class 的基本语法</a></li>\n<li><a href=\"https://juejin.im/post/5d713de26fb9a06ad3474c15#comment\">图解 JavaScript 原型链</a></li>\n</ul>\n","hash":"05bc56a654dda0572e5bf1fedb0c01c1","isArticle":true,"sort":0,"filename":"","raw":"","prev":{"id":"usage-of-ts-transformer","slug":"post/usage-of-ts-transformer","path":"/post/usage-of-ts-transformer","title":"TS transformer 的使用","comments":true,"published":true,"date":"2020-01-26T13:07:08.000Z","updated":"","tags":[{"id":"558b544cf685f39d34e4903e39c38b67","name":"TypeScript","postCount":6,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"558b544cf685f39d34e4903e39c38b67","name":"TypeScript","slug":"categories/TypeScript","path":"/categories/TypeScript","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":4,"postIds":[]}],"excerpt":"<p><code>TS transformer</code> 简单来讲就像<a href=\"https://babeljs.io/docs/en/plugins/\">babel 插件</a>一样，只不过作用于 TypeScript 的编译过程。</p>\n<p>与 babel 插件不同的是，配置 transformer 的时候会有 <code>before</code>、<code>after</code>、<code>afterDeclarations</code> 这三种选项，如果不清楚他们之前的区别的话，使用的时候会充满困惑。</p>\n<p>本文只关注 transformer 的使用，对应的 demo 仓库：<a href=\"https://github.com/daief/usage-of-ts-transformer\">https://github.com/daief/usage-of-ts-transformer</a>。</p>\n","more":"","hash":"ebf4532a5cdcbd505c04ab8afbb336ae","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""},"next":{"id":"oop-in-javascript","slug":"post/oop-in-javascript","path":"/post/oop-in-javascript","title":"JavaScript 中的面向对象","comments":true,"published":true,"date":"2020-02-23T13:19:07.000Z","updated":"","tags":[{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","postCount":16,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","slug":"categories/JavaScript","path":"/categories/JavaScript","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":11,"postIds":[]}],"excerpt":"<p>在 JavaScript 中没有类的概念，因此它的对象与基于类的语言中的对象不同。</p>\n<blockquote>\n<p>ECMA-262 把对象定义为：无序属性的集合，其属性可以包含基本值、对象或函数。</p>\n</blockquote>\n<p>一直以来在编程中都是使用 <code>class</code>、<code>extends</code> 关键字，而这实际上是 ES6 中添加的语法糖。在熟练使用语法糖的同时，有必要了解其背后的原生实现。</p>\n","more":"","hash":"b402900ed7a5b3d3cf6e3bffbdbf98a0","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""}}