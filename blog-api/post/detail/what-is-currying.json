{"id":"what-is-currying","slug":"post/what-is-currying","path":"/post/what-is-currying","title":"认识柯里化（currying）","comments":true,"published":true,"date":"2018-01-04T22:29:17.000Z","updated":"","tags":[{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","postCount":16,"postIds":[]},{"id":"f1317ebe11b75f3ced6f0fb9773d50a6","name":"currying","postCount":1,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","slug":"categories/JavaScript","path":"/categories/JavaScript","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":11,"postIds":[]}],"excerpt":"<p>看文章的时候发现了<code>柯里化</code>一词，然而心中毫无概念，于是就查阅了相关资料有了些许认识。</p>\n","more":"\n\n<h3 id=\"概念\">概念<a name=\"概念\" class=\"headerlink\" href=\"#概念\"></a></h3><p>柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。</p>\n<p>概念初次看起来比较抽象。</p>\n<h3 id=\"实现\">实现<a name=\"实现\" class=\"headerlink\" href=\"#实现\"></a></h3><pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-comment\">// 柯里化</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">currying</span>(<span class=\"hljs-params\">fn</span>) {\n  <span class=\"hljs-comment\">// 提取数组原型的slice方法</span>\n  <span class=\"hljs-keyword\">var</span> slice = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">slice</span>,\n    <span class=\"hljs-comment\">// 取fn之后的参数并转化为数组</span>\n    __args = slice.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">arguments</span>, <span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// 将具有length属性的对象（arguments）转成数组</span>\n    <span class=\"hljs-keyword\">var</span> __inargs = slice.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">arguments</span>);\n    <span class=\"hljs-comment\">// 合并参数并调用fn</span>\n    <span class=\"hljs-keyword\">return</span> fn.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-literal\">null</span>, __args.<span class=\"hljs-title function_\">concat</span>(__inargs));\n  };\n}</code></pre><p>使用举例：</p>\n<p>我们定义了一个多参的函数<code>foo</code>：</p>\n<pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\">a, b, c</span>) {\n  <span class=\"hljs-comment\">// ...</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a, b, c);\n  <span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"hljs-comment\">// 使用的时候</span>\n<span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// 1 2 3</span>\n<span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>); <span class=\"hljs-comment\">// 1 3 6</span></code></pre><p>将其进行柯里化<strong>固定首位参数</strong>：</p>\n<pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-comment\">// 将foo的首位参数固定为1，得到新的函数foo1</span>\n<span class=\"hljs-keyword\">var</span> foo1 = <span class=\"hljs-title function_\">currying</span>(foo, <span class=\"hljs-number\">1</span>);\n\n<span class=\"hljs-comment\">// 之后我们使用foo1</span>\n<span class=\"hljs-title function_\">foo1</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// 1 2 3</span>\n<span class=\"hljs-title function_\">foo1</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>); <span class=\"hljs-comment\">// 1 3 6</span></code></pre><p>这种情况就很利于当参数<code>a=1</code>的时候，通过柯里化固定参数<code>a</code>，之后使用的时候就不必重复传入<code>1</code>。\n上述<code>foo1(b, c)</code>相当于<code>foo(1, b, c)</code>。\n<a href=\"https://www.zhihu.com/question/40374792/answer/86268208\">借用某位老哥一句话</a>，感觉十分助于认识柯里化：</p>\n<blockquote>\n<p>柯里化可看成一种对高阶函数的降阶处理。\n把原本：\nfunction(arg1,arg2) 变成 function(arg1)(arg2)\nfunction(arg1,arg2,arg3) 变成 function(arg1)(arg2)(arg3)\nfunction(arg1,arg2,arg3,arg4) 变成 function(arg1)(arg2)(arg3)(arg4)\n……</p>\n</blockquote>\n<p>再看一下固定两位参数：</p>\n<pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-comment\">// 柯里化，固定参数a，b（固定两个个参数），使用foo2只需要传入参数c</span>\n<span class=\"hljs-keyword\">var</span> foo2 = <span class=\"hljs-title function_\">currying</span>(foo, <span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;B&#x27;</span>);\n<span class=\"hljs-title function_\">foo2</span>(<span class=\"hljs-string\">&#x27;C&#x27;</span>); <span class=\"hljs-comment\">// A B C</span>\n<span class=\"hljs-title function_\">foo2</span>(<span class=\"hljs-string\">&#x27;C1&#x27;</span>); <span class=\"hljs-comment\">// A B C1</span></code></pre><p>这些就是目前对于柯里化初步的认识。</p>\n<p>最后，看着柯里化的作用也有了些许理解。</p>\n<blockquote>\n<p>柯里化其实本身是固定一个可以预期的参数，并返回一个特定的函数，处理批特定的需求。这增加了函数的适用性，但同时也降低了函数的适用范围。\n函数柯里化，是固定部分参数，返回一个接受剩余参数的函数，也称为部分计算函数，目的是为了缩小适用范围，创建一个针对性更强的函数。</p>\n</blockquote>\n","hash":"9b83a01ba830820907f20c330ac493fc","isArticle":true,"sort":0,"filename":"","raw":"","prev":{"id":"catch-js-and-ajax-exception","slug":"post/catch-js-and-ajax-exception","path":"/post/catch-js-and-ajax-exception","title":"前端错误捕获以及ajax监听","comments":true,"published":true,"date":"2017-12-20T20:44:10.000Z","updated":"","tags":[{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","postCount":16,"postIds":[]},{"id":"c1a751336da265287229972389952205","name":"前端日志","postCount":1,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","slug":"categories/JavaScript","path":"/categories/JavaScript","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":11,"postIds":[]}],"excerpt":"<p>上线的项目难免会有错误，通过分析日志能够有效、准确地定位、重现并解决错误，从而提升产品体验。以下是根据资料以及目前需求所实现的一个前端日志采集的方案。</p>\n","more":"","hash":"4fde60b5f6d05bd28be27a1768267868","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""},"next":{"id":"encapsulate-setTimeout-with-promise","slug":"post/encapsulate-setTimeout-with-promise","path":"/post/encapsulate-setTimeout-with-promise","title":"使用promise封装setTimeout","comments":true,"published":true,"date":"2018-08-21T22:17:59.000Z","updated":"","tags":[{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","postCount":16,"postIds":[]},{"id":"a5a3f0f287a448982aac520cffe4779a","name":"Promise","postCount":1,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","slug":"categories/JavaScript","path":"/categories/JavaScript","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":11,"postIds":[]}],"excerpt":"<p>使用 Promise 对 setTimeout 进行封装，从而支持链式的调用。</p>\n<pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">delay</span> = (<span class=\"hljs-params\">func, millisec, options</span>) =&gt; {\n  <span class=\"hljs-keyword\">let</span> timer = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> reject = <span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, _reject</span>) =&gt;</span> {\n    reject = _reject\n    timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-title function_\">func</span>(options))\n    }, millisec)\n  })\n\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">promise</span>() {\n      <span class=\"hljs-keyword\">return</span> promise\n    },\n    <span class=\"hljs-title function_\">cancel</span>(<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-keyword\">if</span> (timer) {\n        <span class=\"hljs-built_in\">clearTimeout</span>(timer)\n        timer = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-title function_\">reject</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;timer is cancelled&#x27;</span>))\n        reject = <span class=\"hljs-literal\">null</span>\n      }\n    },\n  }\n}</code></pre><p>使用🌰：</p>\n<pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-keyword\">const</span> d = <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{a, b}</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a, b)\n  <span class=\"hljs-keyword\">return</span> a + b\n}, <span class=\"hljs-number\">2000</span>, {<span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">3</span>})\n\nd.<span class=\"hljs-property\">promise</span>.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;result&#x27;</span>, result)\n}).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err)\n})\n\n<span class=\"hljs-comment\">// cancel</span>\n<span class=\"hljs-comment\">// setTimeout(() =&gt; {</span>\n<span class=\"hljs-comment\">//   d.cancel()</span>\n<span class=\"hljs-comment\">// }, 1000)</span></code></pre>","more":"","hash":"9ba631ac47c7a3d0d8944d90e3b28661","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""}}