{"id":"encapsulation-in-react","slug":"post/encapsulation-in-react","path":"/post/encapsulation-in-react","title":"React 中的一些封装","comments":true,"published":true,"date":"2020-03-22T21:06:34.000Z","updated":"","tags":[{"id":"50ce2da63bea6a618e7578fa50690040","name":"React","postCount":2,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"50ce2da63bea6a618e7578fa50690040","name":"React","slug":"categories/React","path":"/categories/React","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":2,"postIds":[]}],"excerpt":"<p>结合资料以及一直以来的开发情况，总结记录一下 React 中的封装方式，具体是以下三种：</p>\n<ul>\n<li>HOC</li>\n<li>Render Props</li>\n<li>React Hooks</li>\n</ul>\n","more":"\n\n<h1 id=\"前言\">前言<a name=\"前言\" class=\"headerlink\" href=\"#前言\"></a></h1><blockquote>\n<p>在线演示：<a href=\"https://codesandbox.io/s/encapsulation-in-react-g3crf\">https://codesandbox.io/s/encapsulation-in-react-g3crf</a></p>\n</blockquote>\n<p>本文以一个倒计时的例子结合进行说明，计时器包含三个要素：</p>\n<ul>\n<li>current，当前计数</li>\n<li>start，开始倒计时的方法</li>\n<li>reset，重置计数的方法</li>\n</ul>\n<p>首先有一个无状态的纯函数组件，用于展示具体的效果：</p>\n<pre class=\"hljs language-tsx\" hljs-language=\"tsx\"><code style=\"display:block;\"><span class=\"hljs-comment\">// FC.tsx</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">FCProps</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">current</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">start</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">void</span>;\n  <span class=\"hljs-attr\">reset</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">void</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">FC</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FunctionComponent</span>&lt;<span class=\"hljs-title class_\">FCProps</span>&gt; = <span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> { name, current, start, reset } = props;\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{style}</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>name: {name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{start}</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;button&quot;</span>&gt;</span>\n        Start\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{reset}</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;button&quot;</span>&gt;</span>\n        Reset\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>current: {current}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n};</code></pre><h1 id=\"HOC\">HOC<a name=\"HOC\" class=\"headerlink\" href=\"#HOC\"></a></h1><p>HOC 即 High Order Component，又可叫作高阶组件。</p>\n<p>特地说明一下只是因为这个名字在一开始给到我的是一种很高大上的感觉，但实际上不是很高深概念。</p>\n<p>官方的说明如下：</p>\n<blockquote>\n<p>A higher-order component is a function that takes a component and returns a new component.</p>\n</blockquote>\n<p>简单来说这种封装方式接受一个组件作为输入，而后返回一个新的组件，常见的一个作用是对组件注入一些 <code>props</code>。</p>\n<p>用一个具体的例子来介绍 HOC 的使用：</p>\n<pre class=\"hljs language-tsx\" hljs-language=\"tsx\"><code style=\"display:block;\"><span class=\"hljs-comment\">// HOC.tsx</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">OuterProps</span>&lt;T&gt; = <span class=\"hljs-title class_\">Omit</span>&lt;T, <span class=\"hljs-string\">&#x27;current&#x27;</span> | <span class=\"hljs-string\">&#x27;start&#x27;</span> | <span class=\"hljs-string\">&#x27;reset&#x27;</span>&gt;;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-variable constant_\">HOC</span>&lt;T&gt;(\n  <span class=\"hljs-title class_\">Component</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">ComponentType</span>&lt;T&gt;,\n): <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">ComponentType</span>&lt;<span class=\"hljs-title class_\">OuterProps</span>&lt;T&gt;&gt; {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> [current, setCurrent] = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">60</span>);\n    <span class=\"hljs-keyword\">const</span> timer = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">useRef</span>&lt;<span class=\"hljs-built_in\">number</span> | <span class=\"hljs-literal\">null</span>&gt;();\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">start</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n      <span class=\"hljs-title function_\">reset</span>();\n      timer.<span class=\"hljs-property\">current</span> = <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-title function_\">setCurrent</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">pre</span> =&gt;</span> pre - <span class=\"hljs-number\">1</span>);\n      }, <span class=\"hljs-number\">1000</span>);\n    };\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">reset</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n      timer.<span class=\"hljs-property\">current</span> &amp;&amp; <span class=\"hljs-built_in\">clearInterval</span>(timer.<span class=\"hljs-property\">current</span>);\n      <span class=\"hljs-title function_\">setCurrent</span>(<span class=\"hljs-number\">60</span>);\n    };\n\n    <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-keyword\">if</span> (current &lt; <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-title function_\">reset</span>();\n      }\n    }, [current]);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-title class_\">Component</span>, {\n      current,\n      start,\n      reset,\n      ...props,\n    });\n  };\n}</code></pre><p>使用的时候十分简单，只需包裹一下，即可获得一个具有倒计时功能的新组件：</p>\n<pre class=\"hljs language-tsx\" hljs-language=\"tsx\"><code style=\"display:block;\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Wrapped</span> = <span class=\"hljs-variable constant_\">HOC</span>&lt;<span class=\"hljs-title class_\">FCProps</span>&gt;(<span class=\"hljs-variable constant_\">FC</span>);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;App&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Wrapped</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;Fc With HOC&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}</code></pre><p>同时可以看到 <code>Wrapped</code> 组件的类型已经被推导出来，它的定义如下：</p>\n<pre class=\"hljs language-tsx\" hljs-language=\"tsx\"><code style=\"display:block;\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Wrapped</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">ComponentType</span>&lt;<span class=\"hljs-title class_\">Pick</span>&lt;<span class=\"hljs-title class_\">FCProps</span>, <span class=\"hljs-string\">&#x27;name&#x27;</span>&gt;&gt;;</code></pre><p>翻译一下就是 <code>Wrapped</code> 组件接受的 <code>props</code> 是从 <code>FCProps</code> 中选出的 <code>name</code> 字段，这样的类型提示对于后续编码是十分有帮助的。</p>\n<blockquote>\n<p>注意此处的 HOC 类型推导需要在泛型处传入 FCProps，而做得好的处理我记得是不需要的，而关于这部分的先不展开了。</p>\n</blockquote>\n<p>简化一下，HOC 是长这样的，就是接收组件，返回一个新的组件：</p>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-variable constant_\">HOC</span>&lt;T&gt;(<span class=\"hljs-title class_\">Component</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// ...</span>\n  };\n}</code></pre><p>可以看到，使用 HOC 轻易地封装了一组有状态的逻辑，从而使得开发时更加清晰和简单。不仅如此，稍加改变 HOC 能变得更加灵活：</p>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-comment\">// 可配置的 HOC</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-variable constant_\">HOC</span>&lt;T&gt;(options) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">Component</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> {\n      <span class=\"hljs-comment\">// ...</span>\n    };\n  };\n}\n\n<span class=\"hljs-comment\">// 使用时</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Wrapped</span> = <span class=\"hljs-title function_\">HOC</span>({\n  <span class=\"hljs-comment\">// ... options here</span>\n})(<span class=\"hljs-variable constant_\">FC</span>);</code></pre><p>此外，HOC 还能对 UI 进行封装：</p>\n<pre class=\"hljs language-tsx\" hljs-language=\"tsx\"><code style=\"display:block;\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-variable constant_\">HOC</span>&lt;T&gt;(<span class=\"hljs-title class_\">Component</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// ...</span>\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        With HOC {/* 添加自定义的 UI */}\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hr</span> /&gt;</span>\n        {React.createElement(Component, {\n          // ...\n        })}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n    );\n  };\n}</code></pre><p>HOC 是十分常见的一种用法，比如 antd 3 中的 <code>Form.create()(Component)</code> 、react router 中的 <code>withRouter(Component)</code>。</p>\n<p>HOC 的方式十分强大，你可以拦截到组件（指 HOC 中传入的组件）的 props，也可以操纵组件的状态，可以获取到组件的实例，可以在 HOC 做很多的事情。<strong>所以，封装的时候务必保持谨慎，不应该破坏一些常理的内容。</strong></p>\n<p>所以，HOC 也是有缺点的，如：</p>\n<ul>\n<li>因为会注入 props，而注入的 props 可能会与传入的 props 冲突</li>\n<li>经过 HOC 处理后的组件，需要注意 ref 的使用，不特殊处理的话 ref 将无法获取到想要的组件实例</li>\n<li>注意被包裹组件的静态属性，不特殊处理的话包裹后的组件将丢失了这些静态属性</li>\n</ul>\n<h1 id=\"Render Props\">Render Props<a name=\"Render Props\" class=\"headerlink\" href=\"#Render Props\"></a></h1><p><code>Render Props</code> 是一种新的封装方式，可以做到与 HOC 相同效果的同时避免 HOC 的问题。这不是一项什么神奇的技术，只是将某个 props 作为 <code>render</code> 的一个回调函数。</p>\n<p>当使用 Render Props 来封装倒计时可以是这样的：</p>\n<pre class=\"hljs language-tsx\" hljs-language=\"tsx\"><code style=\"display:block;\"><span class=\"hljs-comment\">// RenderProps.tsx</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">RenderProps</span> = (<span class=\"hljs-params\">props: {\n  render: (props: ICallbackArg) =&gt; React.ReactElement;\n}</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> [current, setCurrent] = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">60</span>);\n  <span class=\"hljs-keyword\">const</span> timer = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">useRef</span>&lt;<span class=\"hljs-built_in\">number</span> | <span class=\"hljs-literal\">null</span>&gt;();\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">start</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n    <span class=\"hljs-title function_\">reset</span>();\n    timer.<span class=\"hljs-property\">current</span> = <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-title function_\">setCurrent</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">pre</span> =&gt;</span> pre - <span class=\"hljs-number\">1</span>);\n    }, <span class=\"hljs-number\">1000</span>);\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">reset</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n    timer.<span class=\"hljs-property\">current</span> &amp;&amp; <span class=\"hljs-built_in\">clearInterval</span>(timer.<span class=\"hljs-property\">current</span>);\n    <span class=\"hljs-title function_\">setCurrent</span>(<span class=\"hljs-number\">60</span>);\n  };\n\n  <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (current &lt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-title function_\">reset</span>();\n    }\n  }, [current]);\n\n  <span class=\"hljs-keyword\">return</span> props.<span class=\"hljs-title function_\">render</span>({\n    current,\n    start,\n    reset,\n  });\n};</code></pre><p>使用方式如下：</p>\n<pre class=\"hljs language-tsx\" hljs-language=\"tsx\"><code style=\"display:block;\">&lt;<span class=\"hljs-title class_\">RenderProps</span> render={<span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FC</span> {<span class=\"hljs-attr\">...props</span>} <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;RenderProps&quot;</span> /&gt;</span></span>} /&gt;</code></pre><p>更多的 Render Props 会选择将 <code>children</code> 作为这样的 props，此时用起来就会是这样的：</p>\n<pre class=\"hljs language-tsx\" hljs-language=\"tsx\"><code style=\"display:block;\">&lt;<span class=\"hljs-title class_\">RenderProps</span>&gt;{<span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FC</span> {<span class=\"hljs-attr\">...props</span>} <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;RenderProps&quot;</span> /&gt;</span></span>}&lt;/<span class=\"hljs-title class_\">RenderProps</span>&gt;</code></pre><p>同样地，也可以封装 UI；同时不用再担心 props 冲突、ref 等问题。</p>\n<p>不过，这种方式我认为也是有缺点的：</p>\n<ul>\n<li>就是单纯写起来的时候嵌套会比较多，尤其同时用到多个的时候</li>\n</ul>\n<h1 id=\"React Hooks\">React Hooks<a name=\"React Hooks\" class=\"headerlink\" href=\"#React Hooks\"></a></h1><p>React Hooks 是 React 16.8.0 中出现的新概念，不过到今天的时候已经不能算新了吧，也不多作说明了。</p>\n<p>Hooks 的封装如下：</p>\n<pre class=\"hljs language-ts\" hljs-language=\"ts\"><code style=\"display:block;\"><span class=\"hljs-comment\">// Hooks.tsx</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useCountDown</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [current, setCurrent] = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">60</span>);\n  <span class=\"hljs-keyword\">const</span> timer = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">useRef</span>&lt;<span class=\"hljs-built_in\">number</span> | <span class=\"hljs-literal\">null</span>&gt;();\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">start</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n    <span class=\"hljs-title function_\">reset</span>();\n    timer.<span class=\"hljs-property\">current</span> = <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-title function_\">setCurrent</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">pre</span> =&gt;</span> pre - <span class=\"hljs-number\">1</span>);\n    }, <span class=\"hljs-number\">1000</span>);\n  };\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">reset</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n    timer.<span class=\"hljs-property\">current</span> &amp;&amp; <span class=\"hljs-built_in\">clearInterval</span>(timer.<span class=\"hljs-property\">current</span>);\n    <span class=\"hljs-title function_\">setCurrent</span>(<span class=\"hljs-number\">60</span>);\n  };\n\n  <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (current &lt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-title function_\">reset</span>();\n    }\n  }, [current]);\n\n  <span class=\"hljs-keyword\">return</span> {\n    current,\n    start,\n    reset,\n  };\n}</code></pre><p>使用：</p>\n<pre class=\"hljs language-tsx\" hljs-language=\"tsx\"><code style=\"display:block;\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> props = <span class=\"hljs-title function_\">useCountDown</span>();\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;App&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FC</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;With Hooks&quot;</span> {<span class=\"hljs-attr\">...props</span>} /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}</code></pre><p>这种方式完全就是 hooks 的方式了，优点、局限与常规 hooks 一致了。</p>\n<h1 id=\"结语\">结语<a name=\"结语\" class=\"headerlink\" href=\"#结语\"></a></h1><p>三种方式在日常开发中都是频繁使用的存在，我不敢说自己使用的时候有多么多么灵活，但的的确确在开发时带来了诸多方便，无论是代码量亦或是解耦方面都有一定的帮助。</p>\n<blockquote>\n<p>在童话中，一个人做他想做的事；\n在现实中，一个人做他能做的事。 -- 「埃莱娜·费兰特」</p>\n</blockquote>\n<p>完。</p>\n","hash":"f15591dc7b027ccb9301580f6b438c26","isArticle":true,"sort":0,"filename":"","raw":"","prev":{"id":"my-mac-apps","slug":"post/my-mac-apps","path":"/post/my-mac-apps","title":"我的 Mac 应用","comments":true,"published":true,"date":"2020-03-13T14:26:11.000Z","updated":"","tags":[],"categories":[{"id":"aefcbfca08c840aeb8bd72dc1c8ff7f9","name":"生活","slug":"categories/生活","path":"/categories/生活","parentId":"","postCount":3,"postIds":[]}],"excerpt":"<p>记一下自用的简易 Mac 应用清单：</p>\n","more":"","hash":"fb9a0f99d96bc02d564698407866c0d6","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""},"next":{"id":"hexo-custom-code-highlight-by-prismjs","slug":"post/hexo-custom-code-highlight-by-prismjs","path":"/post/hexo-custom-code-highlight-by-prismjs","title":"使用 prismjs 自定义 Hexo 代码高亮","comments":true,"published":true,"date":"2020-03-23T16:50:24.000Z","updated":"","tags":[{"id":"be8df1f28c0abc85a0ed0c6860e5d832","name":"Blog","postCount":3,"postIds":[]},{"id":"c00d1eb68b529768ba98c975c76a9b66","name":"Hexo","postCount":1,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"c00d1eb68b529768ba98c975c76a9b66","name":"Hexo","slug":"categories/Hexo","path":"/categories/Hexo","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":1,"postIds":[]}],"excerpt":"<p>一直就想优化一下 Hexo 的代码高亮部分来着，对 <code>ts</code>、<code>tsx</code> 部分的支持一直不太好；也许直接更新 Next 就能直接解决，但博客部分已经魔改了不少，本着这个原则就继续魔改下去好了。</p>\n<blockquote>\n<p>本站是在 Next 5 的基础上建成的，不过本文内容与 Next 5 的关系不大</p>\n</blockquote>\n","more":"","hash":"5cb61feaa8a607c534c6e7936c2bb437","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""}}