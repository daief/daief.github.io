{"id":"ime-and-keydown-event","slug":"post/ime-and-keydown-event","path":"/post/ime-and-keydown-event","title":"输入法与 keydown 事件","comments":true,"published":true,"date":"2022-10-20T17:01:39.000Z","updated":"","tags":[],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]}],"excerpt":"<p>输入、回车提交，这是一组在搜索场景中常见、友好的交互形式，但要将其做好以获得更好的用户体验，还需要关注其中的小小细节。</p>\n","more":"\n\n<h2 id=\"监听回车\">监听回车<a name=\"监听回车\" class=\"headerlink\" href=\"#监听回车\"></a></h2><p>所谓的细节就是关于“回车”的监听。因为输入法的存在，引入了文本合成现象，使得字符输入变得不再纯粹简单。</p>\n<p>若处理不当，就会出现在开着输入法的情况下，当只想使用回车输入字符时，却触发了提交动作。</p>\n<p>就像这样：</p>\n<p><img alt=\"github-search.webp\" loading=\"lazy\" title=\"github-search.webp\" class=\"post-image \" src=\"/images/482ba0080e8aa045c7946320cc766ceb.github-search.webp\" onerror=\"this.onerror=null;this.src='/images/image-error.jpg';\"></p>\n<p>大胆猜想一下，上面输入框的实现可能是这样的：</p>\n<pre class=\"hljs language-ts\" hljs-language=\"ts\"><code style=\"display:block;\">input.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;keydown&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (e.<span class=\"hljs-property\">code</span> !== <span class=\"hljs-string\">&#x27;Enter&#x27;</span>) <span class=\"hljs-keyword\">return</span>;\n  <span class=\"hljs-comment\">// ... submit</span>\n});</code></pre><p>问题的原因就很明显了，需要在判断回车的时候，考虑一下用户的输入模式。那么问题来了，如何区分用户是否处于输入法模式呢，又或者说是处于文本合成事件当中？</p>\n<p>回到 <code>keydown</code> 事件，探究 KeyboardEvent 对象上的几个属性：</p>\n<ul>\n<li>charCode：已废弃，Edge 106.0.1370.47 上读取的值总是 0</li>\n<li>code：表示键盘上的物理键，该值不会被键盘布局或修饰键的状态改变，例如有 ShiftLeft、Digit3、KeyD</li>\n<li>key：用户按下的物理按键的值，与 <code>shiftKey</code> 等调节性按键的状态和键盘的区域 / 和布局有关，例如有 D、d、shift、3、#</li>\n<li>keyCode：已废弃，Edge 106.0.1370.47 上还能使用</li>\n<li>isComposing：表示事件是否处于文本合成事件之间</li>\n</ul>\n<p><img alt=\"keydown.webp\" loading=\"lazy\" title=\"keydown.webp\" class=\"post-image \" src=\"/images/1cc89e55d3a33847a1bb78c4e27f66c0.keydown.webp\" onerror=\"this.onerror=null;this.src='/images/image-error.jpg';\"></p>\n<p>有了上述信息，结合 <code>isComposing</code> 就能很容易地判断出是否处于输入法模式了：</p>\n<pre class=\"hljs language-ts\" hljs-language=\"ts\"><code style=\"display:block;\">input.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;keydown&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (!e.<span class=\"hljs-property\">isComposing</span> &amp;&amp; e.<span class=\"hljs-property\">code</span> === <span class=\"hljs-string\">&#x27;Enter&#x27;</span>) {\n    <span class=\"hljs-comment\">// ... submit</span>\n  }\n});</code></pre><p>如此一来，搜索场景的用户体验就能做到完善了。</p>\n<h2 id=\"关于废弃的 keyCode\">关于废弃的 keyCode<a name=\"关于废弃的 keyCode\" class=\"headerlink\" href=\"#关于废弃的 keyCode\"></a></h2><p>keyCode 虽然被标记为废弃、原则上不应再去用，但依旧有在被使用（比如别人写的代码），所以需要具备一些相关的知识。</p>\n<p>简单来说，keyCode 是键盘字符映射的一个数字值，而 keyCode 被废弃的原因大概是某些键的映射值表现不一吧，比如在不同浏览器上会有值不同的情况。</p>\n<p>另外，keyCode 还有一个魔法值：<code>229</code>，表示正处于文本合成事件当中。</p>\n<h2 id=\"文本合成事件\">文本合成事件<a name=\"文本合成事件\" class=\"headerlink\" href=\"#文本合成事件\"></a></h2><p>浏览器有专门的文本合成事件用于监听，即：</p>\n<ul>\n<li>compositionstart</li>\n<li>compositionupdate</li>\n<li>compositionend</li>\n</ul>\n<p>通过该事件可获取处于合成事件中的文本，即输入法正在键入的字符：</p>\n<pre class=\"hljs language-ts\" hljs-language=\"ts\"><code style=\"display:block;\">input.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;compositionupdate&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`characters: <span class=\"hljs-subst\">${event.data}</span>`</span>);\n});</code></pre><h2 id=\"结语\">结语<a name=\"结语\" class=\"headerlink\" href=\"#结语\"></a></h2><p>简单介绍了与输入法相关的一些事件使用，简单的交互背后也有他的细节，做好了细节才能将一件事做到尽善尽美。</p>\n<p>相关资料：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/keydown_event\">Element: 键盘按下事件</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent\">KeyboardEvent</a></li>\n</ul>\n","hash":"1bd48204dba8dd8ca9efa567b07e63e0","isArticle":true,"sort":0,"filename":"","raw":"","prev":{"id":"react-state-management-based-on-react-hooks","slug":"post/react-state-management-based-on-react-hooks","path":"/post/react-state-management-based-on-react-hooks","title":"基于 React Hooks 的小型状态管理","comments":true,"published":true,"date":"2021-12-26T18:20:42.000Z","updated":"","tags":[{"id":"50ce2da63bea6a618e7578fa50690040","name":"React","postCount":2,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"50ce2da63bea6a618e7578fa50690040","name":"React","slug":"categories/React","path":"/categories/React","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":2,"postIds":[]}],"excerpt":"<p>一年又又又要过去了，在这 2021 年的尾巴，来写写 React 的状态管理。</p>\n<p>本文主要介绍一种基于 React Hooks 的状态共享方案，介绍其实现，并总结一下使用感受，目的是在状态管理方面提供多一种选择方式。</p>\n","more":"","hash":"7339a57fb5fac85352fa2dd99cdf25b9","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""},"next":{"id":"further-knowledge-of-ssh-and-ssh-config","slug":"post/further-knowledge-of-ssh-and-ssh-config","path":"/post/further-knowledge-of-ssh-and-ssh-config","title":"进一步认识 SSH 和 SSH config","comments":true,"published":true,"date":"2022-12-22T10:53:04.000Z","updated":"","tags":[{"id":"765553e6c7ac8592c389acb9878a050a","name":"SSH","postCount":1,"postIds":[]}],"categories":[{"id":"edc9f0a5a5d57797bf68e37364743831","name":"Linux","slug":"categories/Linux","path":"/categories/Linux","parentId":"","postCount":4,"postIds":[]}],"excerpt":"<p>不知道有多少人和我一样，对 SSH key 的接触起始于 Git 的使用，反正是啥也不懂，跟着教程一顿敲：</p>\n<pre class=\"hljs language-bash\" hljs-language=\"bash\"><code style=\"display:block;\">$ ssh-keygen -t rsa -b 2048 -C <span class=\"hljs-string\">&quot;xxxxxxxxxx@qq.com&quot;</span></code></pre><p>一路回车，然后把 <code>id_rsa.pub</code> 的内容填入到 Github/Gitlab 的设置里，就转头去使用 Git 了。</p>\n","more":"","hash":"764b88a83225c7530143ae3dec7d28ee","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""}}