{"id":"troubles-with-web-developing-in-weixin","slug":"post/troubles-with-web-developing-in-weixin","path":"/post/troubles-with-web-developing-in-weixin","title":"微信网页开发踩坑记录","comments":true,"published":true,"date":"2019-09-07T14:51:32.000Z","updated":"","tags":[],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]}],"excerpt":"<p>如标题所示，本文用于记录在微信中开发页面时所遇到的坑。</p>\n","more":"\n\n<h1 id=\"正文\">正文<a name=\"正文\" class=\"headerlink\" href=\"#正文\"></a></h1><h2 id=\"iOS 中收起软键盘时页面不恢复 - 2019-08\">iOS 中收起软键盘时页面不恢复 - 2019-08<a name=\"iOS 中收起软键盘时页面不恢复 - 2019-08\" class=\"headerlink\" href=\"#iOS 中收起软键盘时页面不恢复 - 2019-08\"></a></h2><p>描述：页面上有一个 input 输入框，输入框聚焦时会出现软键盘，同时页面会被软键盘顶起来（页面高度被压缩）。点击输入框其他地方让输入框失去焦点，使得软键盘收起。</p>\n<p>期望结果：软键盘收起，页面恢复。</p>\n<p>实际表现：在 iOS 中，软键盘收起，但被顶起的页面没有恢复，需要人为滚动一下页面才会恢复。</p>\n<p>解决方式：为 input 绑定 <code>blur</code> 事件，事件触发时主动调用页面滚动方法。</p>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;myInput&#x27;</span>).<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;blur&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">scrollTo</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n});</code></pre><p>当时的页面只有一屏多一点点，所以使用 <code>window.scrollTo(0, 0)</code> 滚动到顶部是没有问题。但页面若是比较长，input 在中间部分，这样带来的体验显示是不好的。因此是否可以用另一个滚动 API（该方式未实践过）。</p>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;myInput&#x27;</span>).<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;blur&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">scrollBy</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// y 轴进行少量滚动</span>\n});</code></pre><h2 id=\"iOS 中 input 的 placeholder 不垂直居中 - 2019-08\">iOS 中 input 的 placeholder 不垂直居中 - 2019-08<a name=\"iOS 中 input 的 placeholder 不垂直居中 - 2019-08\" class=\"headerlink\" href=\"#iOS 中 input 的 placeholder 不垂直居中 - 2019-08\"></a></h2><p>描述：常常，会对单行输入框 input 设置 CSS 的 <code>line-height</code> 和 <code>height</code> 以达到输入文案、placeholder 垂直居中的效果。</p>\n<p>实际表现：在 iOS 中，input 的 placeholder 没有垂直居中。</p>\n<p>解决方式：<code>line-height</code> 设置为 <code>normal</code> 或者使用 <code>padding</code>、<code>margin</code> 让 input 看起来垂直居中。</p>\n<p>相关阅读：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/line-height\">MDN - line-height</a></li>\n</ul>\n<h2 id=\"iOS 中 Vue 的前端路由与 URL 相关的问题 - 2019-08\">iOS 中 Vue 的前端路由与 URL 相关的问题 - 2019-08<a name=\"iOS 中 Vue 的前端路由与 URL 相关的问题 - 2019-08\" class=\"headerlink\" href=\"#iOS 中 Vue 的前端路由与 URL 相关的问题 - 2019-08\"></a></h2><p>描述：前提，Vue 项目，路由模式为 browser。在微信中打开了一个 Vue 的 SPA 页面，初次展示的页面记为 <code>A</code>，前端路由跳转至页面 <code>B</code>。此时执行操作：在浏览器中打开、复制链接。</p>\n<p>期望结果：打开页面 <code>B</code>、得到页面 <code>B</code> 的链接。</p>\n<p>实际表现：打开了页面 <code>A</code>、得到的是页面 <code>A</code> 的链接。</p>\n<p>解决方式：放弃前端路由的跳转方式，使用原生 <code>location</code> 进行跳转。</p>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\">location.<span class=\"hljs-property\">href</span> = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${location.protocol}</span>//<span class=\"hljs-subst\">${location.host}</span>/page/b`</span>;</code></pre><p>在该问题的查阅过程中，得知 hash 模式也会有这样的问题，以及需要使用到 URL 的调用（如微信分享）也需要注意该问题。</p>\n","hash":"70d0620b5d217df4184ef01c9afc8c55","isArticle":true,"sort":0,"filename":"","raw":"","prev":{"id":"use-summary-of-next-js-and-graphql","slug":"post/use-summary-of-next-js-and-graphql","path":"/post/use-summary-of-next-js-and-graphql","title":"Next.js、GraphQL 使用小结","comments":true,"published":true,"date":"2019-07-03T19:11:51.000Z","updated":"","tags":[{"id":"1c16e694abe7b18f52484174b0aa3c87","name":"SSR","postCount":2,"postIds":[]},{"id":"524de3d2ade4544176f60702b36fbfdf","name":"GraphQL","postCount":1,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]}],"excerpt":"<p>近段时间里使用 <a href=\"https://github.com/zeit/next.js\">Next.js</a> 搭建了两个后台，同时还使用了 GraphQL。期间匆匆忙忙，而且项目都是另一个前端老哥搭建的。所以，自己又抽空从头开始搭建了几个 demo，回顾一下知识，同时整理了一下当时遇见的问题、梳理下其中缘由。</p>\n<p>本文主要内容包括三个 demo 的介绍，并记录一些在开发过程中遇到的问题和解决，本文对应 Next.js 版本为 <del>v8.0.3</del>。写的时候发现 Next.js 升级到 v9.0.0 了，自带 TypeScript 支持了，果断把 demo 的版本也升级了。</p>\n<p>上一篇文章（《{% post_link get-a-ssr-demo-step-by-step %}》）介绍了从零搭建 SSR 的过程，并且附带了一些问题的讲解，推荐结合阅读。</p>\n<p>那么，按照惯例就先呈上 demo 地址：<a href=\"https://github.com/daief/react-ssr\">react-ssr</a>。</p>\n","more":"","hash":"3da5ab4c3075862ff93e4ccf40d1fbbb","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""},"next":{"id":"typescript-types-of-nested-array-and-deep-partial","slug":"post/typescript-types-of-nested-array-and-deep-partial","path":"/post/typescript-types-of-nested-array-and-deep-partial","title":"TypeScript 之嵌套数组与深度可选类型","comments":true,"published":true,"date":"2019-09-08T19:22:56.000Z","updated":"","tags":[{"id":"558b544cf685f39d34e4903e39c38b67","name":"TypeScript","postCount":6,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"558b544cf685f39d34e4903e39c38b67","name":"TypeScript","slug":"categories/TypeScript","path":"/categories/TypeScript","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":4,"postIds":[]}],"excerpt":"<h1 id=\"嵌套数组类型\">嵌套数组类型<a name=\"嵌套数组类型\" class=\"headerlink\" href=\"#嵌套数组类型\"></a></h1><p>以下类型可用于描述嵌套的数组类型。</p>\n","more":"","hash":"ff811fa16c456d82eb469d1dbe3b3eb9","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""}}