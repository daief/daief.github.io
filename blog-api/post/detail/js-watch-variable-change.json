{"id":"js-watch-variable-change","slug":"post/js-watch-variable-change","path":"/post/js-watch-variable-change","title":"JS监听一个变量的变化","comments":true,"published":true,"date":"2017-11-22T16:18:10.000Z","updated":"","tags":[{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","postCount":16,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","slug":"categories/JavaScript","path":"/categories/JavaScript","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":11,"postIds":[]}],"excerpt":"<p>js 监听一个值的变化，当值变化之后能够触发一些操作。</p>\n","more":"\n\n<blockquote>\n<p><a href=\"https://blog.daraw.cn/2016/08/17/how-to-monitor-changes-of-js-variable/\">https://blog.daraw.cn/2016/08/17/how-to-monitor-changes-of-js-variable/</a></p>\n</blockquote>\n<h3 id=\"defineProperty （ES5）\">defineProperty （ES5）<a name=\"defineProperty （ES5）\" class=\"headerlink\" href=\"#defineProperty （ES5）\"></a></h3><blockquote>\n<p>首先 IE8 及更低版本 IE 是无法使用的，而且这个特性是没有 polyfill 的，无法在不支持的平台实现，这也是基于 ES5getter 和 setter 的 Vue.js 不支持 IE8 及更低版本 IE 的原因。也许有人会提到 avalon，avalon 在低版本 IE 借助 vbscript 一些黑魔法实现了类似的功能。\n除此之外，还有一个问题就是修改数组的 length，直接用索引设置元素如 items[0] = {}，以及数组的 push 等变异方法是无法触发 setter 的。</p>\n</blockquote>\n<pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-comment\">// 监听变量的变化 es5 defineProperty</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Watch</span>(<span class=\"hljs-params\">v, getcall, setcall</span>) {\n  <span class=\"hljs-keyword\">var</span> val = v;\n  <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-string\">&quot;val&quot;</span>, {\n    <span class=\"hljs-attr\">get</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-title function_\">getcall</span>(val);\n      <span class=\"hljs-keyword\">return</span> val;\n    },\n    <span class=\"hljs-attr\">set</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>) {\n      <span class=\"hljs-keyword\">var</span> old = val;\n      val = value;\n      <span class=\"hljs-title function_\">setcall</span>(old, val);\n    }\n  });\n}\n\n<span class=\"hljs-keyword\">var</span> count = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Watch</span>(\n  <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">v</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;get&quot;</span>, v);\n  },\n  <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">old, newv</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;set&quot;</span>, <span class=\"hljs-string\">&quot;old:&quot;</span>, old, <span class=\"hljs-string\">&quot;new:&quot;</span>, newv);\n  }\n);\n\ncount.<span class=\"hljs-property\">val</span> = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 触发set回调</span>\n\n<span class=\"hljs-title function_\">alert</span>(count.<span class=\"hljs-property\">val</span>); <span class=\"hljs-comment\">// 触发get回调</span></code></pre><h3 id=\"Proxy （ES6）\">Proxy （ES6）<a name=\"Proxy （ES6）\" class=\"headerlink\" href=\"#Proxy （ES6）\"></a></h3><pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Proxy</span>(target, handler);\n<span class=\"hljs-comment\">// target为目标对象，可以是任意类型的对象，比如数组，函数，甚至是另外一个代理对象。</span>\n<span class=\"hljs-comment\">// handler为处理器对象，包含了一组代理方法，分别控制所生成代理对象的各种行为。</span></code></pre><pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Proxy</span>(\n  {},\n  {\n    <span class=\"hljs-attr\">get</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">obj, prop</span>) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;get:&quot;</span>, prop);\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    },\n    <span class=\"hljs-attr\">set</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">obj, prop, value</span>) {\n      obj[prop] = value;\n\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;obj:&quot;</span>, obj, <span class=\"hljs-string\">&quot;prop:&quot;</span>, prop, <span class=\"hljs-string\">&quot;value:&quot;</span>, value);\n\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n  }\n);\n\na.<span class=\"hljs-property\">val</span> = <span class=\"hljs-number\">100</span>; <span class=\"hljs-comment\">// obj: {val: 100} prop: val value: 100</span>\n\n<span class=\"hljs-keyword\">var</span> b = a.<span class=\"hljs-property\">val</span>; <span class=\"hljs-comment\">// get: val</span></code></pre><blockquote>\n<p>Proxy 的能力远不仅此。</p>\n</blockquote>\n","hash":"1c8779de7b19bc69a62a17416d3e6865","isArticle":true,"sort":0,"filename":"","raw":"","prev":{"id":"html5-indexdb","slug":"post/html5-indexdb","path":"/post/html5-indexdb","title":"IndexedDB的简单使用","comments":true,"published":true,"date":"2017-11-10T23:19:49.000Z","updated":"","tags":[{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","postCount":16,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","slug":"categories/JavaScript","path":"/categories/JavaScript","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":11,"postIds":[]}],"excerpt":"<p>使用 IndexedDB 在前端对数据进行缓存，简单记录用法。</p>\n<blockquote>\n<p>IndexedDB 是一种低级 API，用于客户端存储大量结构化数据(包括, 文件/ blobs)。该 API 使用索引来实现对该数据的高性能搜索。</p>\n</blockquote>\n","more":"","hash":"18a78607854650204f8498fa9059ba03","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""},"next":{"id":"css-general-knowledge","slug":"post/css-general-knowledge","path":"/post/css-general-knowledge","title":"CSS小知识","comments":true,"published":true,"date":"2017-12-07T16:52:48.000Z","updated":"","tags":[{"id":"2c56c360580420d293172f42d85dfbed","name":"CSS","postCount":1,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"2c56c360580420d293172f42d85dfbed","name":"CSS","slug":"categories/CSS","path":"/categories/CSS","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":1,"postIds":[]}],"excerpt":"<p>记录 CSS 一些有用、易忘的知识。</p>\n","more":"","hash":"2e49d1cdd2381727101e97efa3eabd87","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""}}