{"id":"function-hoist-and-conditionally-created-functions","slug":"post/function-hoist-and-conditionally-created-functions","path":"/post/function-hoist-and-conditionally-created-functions","title":"函数提升 & 有条件地创建函数","comments":true,"published":true,"date":"2020-03-08T15:54:52.000Z","updated":"","tags":[{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","postCount":16,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","slug":"categories/JavaScript","path":"/categories/JavaScript","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":11,"postIds":[]}],"excerpt":"<p>本文始于这样一道 JavaScript 题目。</p>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-keyword\">var</span> a;\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n  a = <span class=\"hljs-number\">5</span>;\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">a</span>(<span class=\"hljs-params\"></span>) {}\n  a = <span class=\"hljs-number\">2</span>;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a);\n}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a);</code></pre>","more":"\n\n<p><strong>这种写法是十分不建议在生产环境中使用</strong>，而且在不同的浏览器中会有不同的表现，本文所有结果都是在 Chrome 80.0.3987.132 中运行得到的。</p>\n<p>但上述代码片段的结果却十分神奇，它的运行结果是：</p>\n<pre class=\"hljs language-bash\" hljs-language=\"bash\"><code style=\"display:block;\">2\n5</code></pre><p>在详细研究这道题之前，先回顾下两项概念。顺便一提，全文结束也给不出一个这道题的“为什么”。</p>\n<h2 id=\"函数声明提升\">函数声明提升<a name=\"函数声明提升\" class=\"headerlink\" href=\"#函数声明提升\"></a></h2><p>众所周知，在 JS 当中，代码一的写法实际上可以看成是按照代码二的步骤来运行的。</p>\n<p>代码一：</p>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-title function_\">hoisted</span>(); <span class=\"hljs-comment\">// &quot;foo&quot;</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">hoisted</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;foo&#x27;</span>);\n}</code></pre><p>代码二：</p>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-keyword\">var</span> hoisted;\n\nhoisted = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;foo&#x27;</span>);\n};\n\n<span class=\"hljs-title function_\">hoisted</span>(); <span class=\"hljs-comment\">// &quot;foo&quot;</span></code></pre><p>根据 MDN 的描述，函数提升：</p>\n<blockquote>\n<p>Function declarations in JavaScript are hoisted to the top of the enclosing function or global scope.</p>\n</blockquote>\n<p>指 JS 中函数的定义会被提升到<strong>方法作用域</strong>或<strong>全局作用域</strong>的顶部。但当加入<strong>块级作用域</strong>的时候，事情就变得复杂了起来。</p>\n<h2 id=\"有条件地创建函数\">有条件地创建函数<a name=\"有条件地创建函数\" class=\"headerlink\" href=\"#有条件地创建函数\"></a></h2><p>本节摘自 MDN：</p>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-keyword\">var</span> hoisted = <span class=\"hljs-string\">&#x27;foo&#x27;</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">this</span>;\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(\n  <span class=\"hljs-string\">`&#x27;foo&#x27; name <span class=\"hljs-subst\">${\n    hoisted ? <span class=\"hljs-string\">&#x27;is&#x27;</span> : <span class=\"hljs-string\">&#x27;is not&#x27;</span>\n  }</span> hoisted. typeof foo is <span class=\"hljs-subst\">${<span class=\"hljs-keyword\">typeof</span> foo}</span>`</span>,\n);\n\n<span class=\"hljs-comment\">// 在 Chrome 里:</span>\n<span class=\"hljs-comment\">// &#x27;foo&#x27; 变量名被提升，但是 typeof foo 为 undefined</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// 在 Firefox 里:</span>\n<span class=\"hljs-comment\">// &#x27;foo&#x27; 变量名被提升. 但是 typeof foo 为 undefined</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// 在 Edge 里:</span>\n<span class=\"hljs-comment\">// &#x27;foo&#x27; 变量名未被提升. 而且 typeof foo 为 undefined</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// 在 Safari 里:</span>\n<span class=\"hljs-comment\">// &#x27;foo&#x27; 变量名被提升. 而且 typeof foo 为 function</span>\n\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n  }\n}</code></pre><p>可以看到 <code>foo</code> 变量被提升为全局的 <code>foo</code>，符合前文变量提升的描述，姑且可以用下面的方式去描述这段代码的执行步骤：</p>\n<blockquote>\n<p>暂且只以 Chrome 中的运行效果为准，而实际上我认为 Safari 中的表现才符合预期中的效果。</p>\n</blockquote>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-keyword\">var</span> foo;\n\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n  foo = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n  };\n}</code></pre><p>但用这种方式代入开篇的题目中时，会发现并不是这样的。</p>\n<h2 id=\"调试题目\">调试题目<a name=\"调试题目\" class=\"headerlink\" href=\"#调试题目\"></a></h2><p>借助 Chrome DevTools 跟踪代码每一步的运行，当运行至花括号<code>{</code>时，发现多了一个块级作用域，同时块级作用域中有一个局部变量 <code>a</code>：</p>\n<blockquote>\n<p>本断代码把 if 省略了，效果一样；同时添加了不少 debugger 方便断点。</p>\n</blockquote>\n<p><img alt=\"1\" loading=\"lazy\" title=\"1\" class=\"post-image \" src=\"/images/694e5c3325af0d4449f551b1d2ec7edc.1.jpg\" onerror=\"this.onerror=null;this.src='/images/image-error.jpg';\"></p>\n<p>并且局部 <code>a</code> 的值是块级作用域内定义的函数，同时全局的 <code>window.a</code> 依旧是 <code>undefined</code>。</p>\n<blockquote>\n<p>此时我的内心想法：函数不是应该被提升到顶级作用域吗，不仅不是，从哪里又冒出了一个局部变量，黑人问号.jpg</p>\n</blockquote>\n<p>经过 <code>a = 5</code> 的赋值后，局部变量的 <code>a</code> 为 <code>5</code>，<code>window.a</code> 依旧是 <code>undefined</code>。</p>\n<p><img alt=\"2\" loading=\"lazy\" title=\"2\" class=\"post-image \" src=\"/images/8393237406bd56c4e9850c729153d080.2.jpg\" onerror=\"this.onerror=null;this.src='/images/image-error.jpg';\"></p>\n<p>执行完<strong>函数声明</strong>语句后，<code>window.a</code> 神奇地变为了 <code>5</code>。我觉得此时看到的只是表面上的代码了，背后解释器的运行一定有其他的行为，但对于这些我现在还不得而知。</p>\n<p><img alt=\"3\" loading=\"lazy\" title=\"3\" class=\"post-image \" src=\"/images/8a6f6b31700b1a9ae8399b17c85241a4.3.jpg\" onerror=\"this.onerror=null;this.src='/images/image-error.jpg';\"></p>\n<p>最后 <code>a = 2</code> 的赋值也只是改变了局部变量 <code>a</code>，当跳出块级作用域后，只能访问到 <code>window.a</code>，最终得到了开篇的描述的结果。</p>\n<p><img alt=\"4\" loading=\"lazy\" title=\"4\" class=\"post-image \" src=\"/images/101a0b33ac684c626932138d06e6a9c6.4.jpg\" onerror=\"this.onerror=null;this.src='/images/image-error.jpg';\"></p>\n<h2 id=\"结语\">结语<a name=\"结语\" class=\"headerlink\" href=\"#结语\"></a></h2><p>这个事情没能得到一个明确的解释说明实际上挺烦人的，感觉自己学的知识被“侮辱”了 😆，目前只能庆幸这是一种被极力反对的写法，现实当中并不会遇到。</p>\n<p>要是有大佬能现身帮忙点拨一番，不胜感激！</p>\n<p>还有关于有条件地创建函数，我想真不会有人像这样编码吧：</p>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-comment\">// ❌</span>\n<span class=\"hljs-keyword\">if</span> (condition) {\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;true&#x27;</span>;\n  }\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;false&#x27;</span>;\n  }\n}\n\n<span class=\"hljs-title function_\">foo</span>();</code></pre><p>一般而言，应该是这样比较多才对：</p>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> !!condition + <span class=\"hljs-string\">&#x27;&#x27;</span>;\n}\n\n<span class=\"hljs-title function_\">foo</span>();</code></pre><p>或者，真想进行<strong>有条件地创建函数</strong>，也建议使用不会有提升现象的函数表达式：</p>\n<pre class=\"hljs language-js\" hljs-language=\"js\"><code style=\"display:block;\"><span class=\"hljs-keyword\">var</span> foo;\n\n<span class=\"hljs-comment\">// if 语句或者三元表达式</span>\n<span class=\"hljs-keyword\">if</span> (condition) {\n  foo = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;true&#x27;</span>;\n  };\n} <span class=\"hljs-keyword\">else</span> {\n  foo = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;false&#x27;</span>;\n  };\n}\n\n<span class=\"hljs-title function_\">foo</span>();</code></pre><p>最后，祝全天下的女神节日快乐哦~</p>\n<p>完。</p>\n<hr>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Hoisting\">Hoisting（变量提升</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\">function declaration</a></li>\n</ul>\n","hash":"fee2b91ee3e981eb03b60c6ae3b8e6e6","isArticle":true,"sort":0,"filename":"","raw":"","prev":{"id":"oop-in-javascript","slug":"post/oop-in-javascript","path":"/post/oop-in-javascript","title":"JavaScript 中的面向对象","comments":true,"published":true,"date":"2020-02-23T13:19:07.000Z","updated":"","tags":[{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","postCount":16,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","slug":"categories/JavaScript","path":"/categories/JavaScript","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":11,"postIds":[]}],"excerpt":"<p>在 JavaScript 中没有类的概念，因此它的对象与基于类的语言中的对象不同。</p>\n<blockquote>\n<p>ECMA-262 把对象定义为：无序属性的集合，其属性可以包含基本值、对象或函数。</p>\n</blockquote>\n<p>一直以来在编程中都是使用 <code>class</code>、<code>extends</code> 关键字，而这实际上是 ES6 中添加的语法糖。在熟练使用语法糖的同时，有必要了解其背后的原生实现。</p>\n","more":"","hash":"b402900ed7a5b3d3cf6e3bffbdbf98a0","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""},"next":{"id":"my-mac-apps","slug":"post/my-mac-apps","path":"/post/my-mac-apps","title":"我的 Mac 应用","comments":true,"published":true,"date":"2020-03-13T14:26:11.000Z","updated":"","tags":[],"categories":[{"id":"aefcbfca08c840aeb8bd72dc1c8ff7f9","name":"生活","slug":"categories/生活","path":"/categories/生活","parentId":"","postCount":3,"postIds":[]}],"excerpt":"<p>记一下自用的简易 Mac 应用清单：</p>\n","more":"","hash":"fb9a0f99d96bc02d564698407866c0d6","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""}}