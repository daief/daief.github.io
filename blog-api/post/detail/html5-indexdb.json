{"id":"html5-indexdb","slug":"post/html5-indexdb","path":"/post/html5-indexdb","title":"IndexedDB的简单使用","comments":true,"published":true,"date":"2017-11-10T23:19:49.000Z","updated":"","tags":[{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","postCount":16,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","slug":"categories/JavaScript","path":"/categories/JavaScript","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":11,"postIds":[]}],"excerpt":"<p>使用 IndexedDB 在前端对数据进行缓存，简单记录用法。</p>\n<blockquote>\n<p>IndexedDB 是一种低级 API，用于客户端存储大量结构化数据(包括, 文件/ blobs)。该 API 使用索引来实现对该数据的高性能搜索。</p>\n</blockquote>\n","more":"\n\n<blockquote>\n<p><a href=\"http://www.tfan.org/using-indexeddb/\">使用 IndexedDB http://www.tfan.org/using-indexeddb/</a></p>\n</blockquote>\n<h3 id=\"基本模式\">基本模式<a name=\"基本模式\" class=\"headerlink\" href=\"#基本模式\"></a></h3><p><strong>IndexedDB 的操作都是异步的</strong></p>\n<p>IndexedDB 鼓励使用的基本模式如下所示：</p>\n<ol>\n<li>打开数据库并且开始一个事务。</li>\n<li>创建一个 object store（IndexedDB 使用对象存储空间而不是表）。</li>\n<li>构建一个请求来执行一些数据库操作，像增加或提取数据等。</li>\n<li>通过监听正确类型的事件以等待操作完成。</li>\n<li>在操作结果上进行一些操作（可以在 request 对象中找到）。</li>\n</ol>\n<h3 id=\"实现过程\">实现过程<a name=\"实现过程\" class=\"headerlink\" href=\"#实现过程\"></a></h3><h4 id=\"<code>idb.js</code>:\"><code>idb.js</code>:<a name=\"<code>idb.js</code>:\" class=\"headerlink\" href=\"#<code>idb.js</code>:\"></a></h4><pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">DB_NAME</span> = <span class=\"hljs-string\">&quot;test_db&quot;</span>;\n<span class=\"hljs-comment\">// 数据库版本</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">DB_VERSION</span> = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">DB_STORE_NAME</span> = <span class=\"hljs-string\">&quot;books&quot;</span>;\n\n<span class=\"hljs-comment\">// IndexedDB 句柄</span>\n<span class=\"hljs-keyword\">var</span> db = <span class=\"hljs-literal\">null</span>;\n\n<span class=\"hljs-title function_\">initDb</span>();\n\n<span class=\"hljs-comment\">/**\n * 初始化\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initDb</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">/**\n   * open 函数的结果是一个IDBDatabase对象的实例。\n   * 第二个参数，就是数据库的版本号。\n   * 如果我们打开的数据库不是我们期望的最新版本的话，\n   * 我们可以对 object store 进行创建或是删除。\n   * 在 onupgradeneeded 事件中进行更新\n   */</span>\n  <span class=\"hljs-keyword\">var</span> req = indexedDB.<span class=\"hljs-title function_\">open</span>(<span class=\"hljs-variable constant_\">DB_NAME</span>, <span class=\"hljs-variable constant_\">DB_VERSION</span>);\n\n  req.<span class=\"hljs-property\">onsuccess</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">evt</span>) {\n    <span class=\"hljs-comment\">// 打开成功的事件回调，取得句柄</span>\n    db = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">result</span>;\n  };\n\n  req.<span class=\"hljs-property\">onerror</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">evt</span>) {\n    <span class=\"hljs-comment\">// 数据库打开失败</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&quot;initDb:&quot;</span>, evt.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">errorCode</span>);\n  };\n\n  req.<span class=\"hljs-property\">onupgradeneeded</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">evt</span>) {\n    <span class=\"hljs-comment\">// 更新对象存储空间和索引</span>\n    <span class=\"hljs-comment\">// 创建 object store</span>\n    <span class=\"hljs-comment\">// 以该方式创建使用键值对形式进行存储</span>\n    <span class=\"hljs-keyword\">var</span> store = evt.<span class=\"hljs-property\">currentTarget</span>.<span class=\"hljs-property\">result</span>.<span class=\"hljs-title function_\">createObjectStore</span>(<span class=\"hljs-variable constant_\">DB_STORE_NAME</span>);\n  };\n}\n\n<span class=\"hljs-comment\">/**\n * 读取数据\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Object</span>} key 键\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Function</span>} success 读取数据成功的回调\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Function</span>} fail 读取数据失败的回调\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getBook</span>(<span class=\"hljs-params\">key, success, fail</span>) {\n  success = success || <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {};\n  fail = fail || <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {};\n  <span class=\"hljs-keyword\">if</span> (!db) {\n    <span class=\"hljs-comment\">// db 未初始化或不支持</span>\n    <span class=\"hljs-title function_\">fail</span>();\n    <span class=\"hljs-keyword\">return</span>;\n  }\n\n  <span class=\"hljs-comment\">// 每次读写要创建事务</span>\n  <span class=\"hljs-comment\">// transaction() 方法返回一个事务对象。</span>\n  <span class=\"hljs-comment\">// 第一个参数是事务希望跨越的对象存储空间的列表。空数组表示跨越所有对象存储空间。</span>\n  <span class=\"hljs-comment\">// 如果你没有为第二个参数指定读写方式</span>\n  <span class=\"hljs-keyword\">var</span> tx = db.<span class=\"hljs-title function_\">transaction</span>(<span class=\"hljs-variable constant_\">DB_STORE_NAME</span>, <span class=\"hljs-string\">&quot;readonly&quot;</span>);\n  <span class=\"hljs-keyword\">var</span> store = tx.<span class=\"hljs-title function_\">objectStore</span>(<span class=\"hljs-variable constant_\">DB_STORE_NAME</span>);\n  <span class=\"hljs-comment\">// 读取数据</span>\n  <span class=\"hljs-keyword\">var</span> req = store.<span class=\"hljs-title function_\">get</span>(key);\n\n  req.<span class=\"hljs-property\">onsuccess</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">evt</span>) {\n    <span class=\"hljs-comment\">// 在成功的回调中取得结果</span>\n    <span class=\"hljs-title function_\">success</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">result</span>);\n  };\n\n  req.<span class=\"hljs-property\">onerror</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">evt</span>) {\n    <span class=\"hljs-comment\">// 读取失败</span>\n    <span class=\"hljs-title function_\">fail</span>();\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;get fail&quot;</span>, evt.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">result</span>);\n  };\n}\n\n<span class=\"hljs-comment\">/**\n * 添加数据\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Object</span>} obj 要添加的值\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Object</span>} key 键\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Function</span>} success 添加成功后的回调\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Function</span>} fail 添加数据失败的回调\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">addBook</span>(<span class=\"hljs-params\">obj, key, success, fail</span>) {\n  success = success || <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {};\n  fail = fail || <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {};\n  <span class=\"hljs-keyword\">if</span> (!db) {\n    <span class=\"hljs-title function_\">fail</span>();\n    <span class=\"hljs-keyword\">return</span>;\n  }\n\n  <span class=\"hljs-comment\">// 创建事务</span>\n  <span class=\"hljs-keyword\">var</span> tx = db.<span class=\"hljs-title function_\">transaction</span>(<span class=\"hljs-variable constant_\">DB_STORE_NAME</span>, <span class=\"hljs-string\">&quot;readwrite&quot;</span>);\n  <span class=\"hljs-keyword\">var</span> store = tx.<span class=\"hljs-title function_\">objectStore</span>(<span class=\"hljs-variable constant_\">DB_STORE_NAME</span>);\n  <span class=\"hljs-comment\">// 添加数据</span>\n  <span class=\"hljs-keyword\">var</span> req = store.<span class=\"hljs-title function_\">add</span>(obj, key);\n\n  req.<span class=\"hljs-property\">onsuccess</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">evt</span>) {\n    <span class=\"hljs-title function_\">success</span>();\n  };\n\n  req.<span class=\"hljs-property\">onerror</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title function_\">fail</span>();\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&quot;add error&quot;</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">error</span>);\n  };\n}</code></pre><h4 id=\"<code>index.html</code>中进行使用：\"><code>index.html</code>中进行使用：<a name=\"<code>index.html</code>中进行使用：\" class=\"headerlink\" href=\"#<code>index.html</code>中进行使用：\"></a></h4><pre class=\"hljs language-html\" hljs-language=\"html\"><code style=\"display:block;\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>index<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;idb.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\">\n      <span class=\"hljs-comment\">// 延时操作，确保 indexeddb 初始化完成</span>\n      <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-title function_\">addBook</span>(\n          <span class=\"hljs-string\">&quot;JavaScript&quot;</span>,\n          <span class=\"hljs-number\">1</span>,\n          <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n            <span class=\"hljs-comment\">// add seccess</span>\n            <span class=\"hljs-title function_\">getBook</span>(\n              <span class=\"hljs-number\">1</span>,\n              <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result</span>) {\n                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;get:&quot;</span>, result);\n              },\n              <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;get err&quot;</span>);\n              }\n            );\n          },\n          <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;add err&quot;</span>);\n          }\n        );\n      }, <span class=\"hljs-number\">500</span>);\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></code></pre><h4 id=\"结果：\">结果：<a name=\"结果：\" class=\"headerlink\" href=\"#结果：\"></a></h4><img src=\"https://pic.superbed.cn/item/5c63cec85f3e509ed95668f2\">\n\n<img src=\"https://pic.superbed.cn/item/5c63cec85f3e509ed95668f4\">\n\n<h3 id=\"简单扩展\">简单扩展<a name=\"简单扩展\" class=\"headerlink\" href=\"#简单扩展\"></a></h3><h4 id=\"object store 键的提供方式\">object store 键的提供方式<a name=\"object store 键的提供方式\" class=\"headerlink\" href=\"#object store 键的提供方式\"></a></h4><pre class=\"hljs language-javascript\" hljs-language=\"javascript\"><code style=\"display:block;\">db.<span class=\"hljs-title function_\">createObjectStore</span>(<span class=\"hljs-string\">&quot;books&quot;</span>, { <span class=\"hljs-attr\">keyPath</span>: <span class=\"hljs-string\">&quot;id&quot;</span> });</code></pre><table>\n<thead>\n<tr>\n<th align=\"center\">Key Path</th>\n<th align=\"center\">Key Generator</th>\n<th align=\"center\">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">No</td>\n<td align=\"center\">No</td>\n<td align=\"center\">这种对象存储空间可以持有任意类型的值，甚至是像数字和字符串这种基本数据类型的值。每当我们想要增加一个新值的时候，必须提供一个单独的键参数。</td>\n</tr>\n<tr>\n<td align=\"center\">Yes</td>\n<td align=\"center\">No</td>\n<td align=\"center\">这种对象存储空间只能持有 JavaScript 对象。这些对象必须具有一个和 key path 同名的属性。</td>\n</tr>\n<tr>\n<td align=\"center\">No</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">这种对象存储空间可以持有任意类型的值。键会为我们自动生成，或者如果你想要使用一个特定键的话你可以提供一个单独的键参数。</td>\n</tr>\n<tr>\n<td align=\"center\">Yes</td>\n<td align=\"center\">Yes</td>\n<td align=\"center\">这种对象存储空间只能持有 JavaScript 对象。通常一个键被生成的同时，生成的键的值被存储在对象中的一个和 key path 同名的属性中。然而，如果这样的一个属性已经存在的话，这个属性的值被用作键而不会生成一个新的键。</td>\n</tr>\n</tbody></table>\n","hash":"18a78607854650204f8498fa9059ba03","isArticle":true,"sort":0,"filename":"","raw":"","prev":{"id":"learn-nodejs","slug":"post/learn-nodejs","path":"/post/learn-nodejs","title":"Node.js 学习搭建","comments":true,"published":true,"date":"2017-10-04T00:00:00.000Z","updated":"","tags":[{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","postCount":16,"postIds":[]},{"id":"3b2819dd4c24eda2faf2052eef449551","name":"Node.js","postCount":3,"postIds":[]}],"categories":[{"id":"3b2819dd4c24eda2faf2052eef449551","name":"Node.js","slug":"categories/Node.js","path":"/categories/Node.js","parentId":"","postCount":2,"postIds":[]}],"excerpt":"<p>听说 Node.js 是开启 JavaScript 后端开发之旅的技术，学习一下服务器的搭建过程。</p>\n","more":"","hash":"f243ab1bd311474cb91979f9d76e648a","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""},"next":{"id":"js-watch-variable-change","slug":"post/js-watch-variable-change","path":"/post/js-watch-variable-change","title":"JS监听一个变量的变化","comments":true,"published":true,"date":"2017-11-22T16:18:10.000Z","updated":"","tags":[{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","postCount":16,"postIds":[]}],"categories":[{"id":"9abfe4a03928eb88a75a5cd95822dfef","name":"前端","slug":"categories/前端","path":"/categories/前端","parentId":"","postCount":36,"postIds":[]},{"id":"686155af75a60a0f6e9d80c1f7edd3e9","name":"JavaScript","slug":"categories/JavaScript","path":"/categories/JavaScript","parentId":"9abfe4a03928eb88a75a5cd95822dfef","postCount":11,"postIds":[]}],"excerpt":"<p>js 监听一个值的变化，当值变化之后能够触发一些操作。</p>\n","more":"","hash":"1c8779de7b19bc69a62a17416d3e6865","isArticle":true,"sort":0,"filename":"","raw":"","prev":null,"next":null,"tocHtml":""}}